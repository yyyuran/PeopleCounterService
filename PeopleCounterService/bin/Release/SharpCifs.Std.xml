<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpCifs.Std</name>
    </assembly>
    <members>
        <member name="T:SharpCifs.Config">
            <summary>
            This class uses a static
            <see cref="T:SharpCifs.Util.Sharpen.Properties">Sharpen.Properties</see>
            to act
            as a cental repository for all jCIFS configuration properties. It cannot be
            instantiated. Similar to <code>System</code> properties the namespace
            is global therefore property names should be unique. Before use,
            the <code>load</code> method should be called with the name of a
            <code>Properties</code> file (or <code>null</code> indicating no
            file) to initialize the <code>Config</code>. The <code>System</code>
            properties will then populate the <code>Config</code> as well potentially
            overwriting properties from the file. Thus properties provided on the
            commandline with the <code>-Dproperty.name=value</code> VM parameter
            will override properties from the configuration file.
            
            There are several ways to set jCIFS properties. See
            the <a href="../overview-summary.html#scp">overview page of the API
            documentation</a> for details.
            </summary>
        </member>
        <member name="F:SharpCifs.Config._prp">
            <summary>The static <code>Properties</code>.</summary>
            <remarks>The static <code>Properties</code>.</remarks>
        </member>
        <member name="M:SharpCifs.Config.Apply">
            <summary>
            Apply the value written in Config.
            </summary>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Config.RegisterSmbURLHandler" で無視されました -->
        <member name="M:SharpCifs.Config.SetProperties(SharpCifs.Util.Sharpen.Properties)">
            <summary>Set the default properties of the static Properties used by <tt>Config</tt>.
            </summary>
            <remarks>
            Set the default properties of the static Properties used by <tt>Config</tt>. This permits
            a different Properties object/file to be used as the source of properties for
            use by the jCIFS library. The Properties must be set <i>before jCIFS
            classes are accessed</i> as most jCIFS classes load properties statically once.
            Using this method will also override properties loaded
            using the <tt>-Djcifs.properties=</tt> commandline parameter.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.Load(SharpCifs.Util.Sharpen.InputStream)">
            <summary>
            Load the <code>Config</code> with properties from the stream
            <code>in</code> from a <code>Properties</code> file.
            </summary>
            <remarks>
            Load the <code>Config</code> with properties from the stream
            <code>in</code> from a <code>Properties</code> file.
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Config.Store(SharpCifs.Util.Sharpen.OutputStream,System.String)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Config.SetProperty(System.String,System.String)">
            <summary>Add a property.</summary>
            <remarks>Add a property.</remarks>
        </member>
        <member name="M:SharpCifs.Config.Get(System.String)">
            <summary>Retrieve a property as an <code>Object</code>.</summary>
            <remarks>Retrieve a property as an <code>Object</code>.</remarks>
        </member>
        <member name="M:SharpCifs.Config.GetProperty(System.String,System.String)">
            <summary>Retrieve a <code>String</code>.</summary>
            <remarks>
            Retrieve a <code>String</code>. If the key cannot be found,
            the provided <code>def</code> default parameter will be returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetProperty(System.String)">
            <summary>Retrieve a <code>String</code>.</summary>
            <remarks>Retrieve a <code>String</code>. If the property is not found, <code>null</code> is returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetInt(System.String,System.Int32)">
            <summary>Retrieve an <code>int</code>.</summary>
            <remarks>
            Retrieve an <code>int</code>. If the key does not exist or
            cannot be converted to an <code>int</code>, the provided default
            argument will be returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetInt(System.String)">
            <summary>Retrieve an <code>int</code>.</summary>
            <remarks>Retrieve an <code>int</code>. If the property is not found, <code>-1</code> is returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetLong(System.String,System.Int64)">
            <summary>Retrieve a <code>long</code>.</summary>
            <remarks>
            Retrieve a <code>long</code>. If the key does not exist or
            cannot be converted to a <code>long</code>, the provided default
            argument will be returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetInetAddress(System.String,System.Net.IPAddress)">
            <summary>Retrieve an <code>InetAddress</code>.</summary>
            <remarks>
            Retrieve an <code>InetAddress</code>. If the address is not
            an IP address and cannot be resolved <code>null</code> will
            be returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetBoolean(System.String,System.Boolean)">
            <summary>Retrieve a boolean value.</summary>
            <remarks>Retrieve a boolean value. If the property is not found, the value of <code>def</code> is returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Config.GetInetAddressArray(System.String,System.String,System.Net.IPAddress[])">
            <summary>
            Retrieve an array of <tt>InetAddress</tt> created from a property
            value containting a <tt>delim</tt> separated list of hostnames and/or
            ipaddresses.
            </summary>
            <remarks>
            Retrieve an array of <tt>InetAddress</tt> created from a property
            value containting a <tt>delim</tt> separated list of hostnames and/or
            ipaddresses.
            </remarks>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcBind.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcBind.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcBinding.SetOption(System.String,System.Object)">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.ParseBinding(System.String)">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.GetHandle(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.Bind">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.Sendrecv(SharpCifs.Dcerpc.DcerpcMessage)">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.DoSendFragment(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.DoReceiveFragment(System.Byte[],System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcMessage.Decode_header(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcMessage.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcMessage.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcMessage.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcMessage.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcPipeHandle.#ctor(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcPipeHandle.DoSendFragment(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcPipeHandle.DoReceiveFragment(System.Byte[],System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.DcerpcPipeHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.IDcerpcSecurityProvider.Wrap(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.IDcerpcSecurityProvider.Unwrap(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.DcerpcException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.LsaPolicyHandle.#ctor(SharpCifs.Dcerpc.DcerpcHandle,System.String,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.LsaPolicyHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQosInfo.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQosInfo.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarObjectAttributes.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarObjectAttributes.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarDomainInfo.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarDomainInfo.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarDnsDomainInfo.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarDnsDomainInfo.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarSidPtr.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarSidPtr.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarSidArray.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarSidArray.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTranslatedSid.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTranslatedSid.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTransSidArray.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTransSidArray.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTrustInformation.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTrustInformation.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarRefDomainList.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarRefDomainList.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTranslatedName.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTranslatedName.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTransNameArray.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarTransNameArray.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarClose.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarClose.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQueryInformationPolicy.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQueryInformationPolicy.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarLookupSids.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarLookupSids.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarOpenPolicy2.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarOpenPolicy2.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQueryInformationPolicy2.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Lsarpc.LsarQueryInformationPolicy2.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.MsrpcShareGetInfo.GetSecurity">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo1.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo1.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray1.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray1.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsStorageInfo.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsStorageInfo.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo3.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo3.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray3.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray3.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo200.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo200.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray200.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray200.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo300.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsInfo300.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray300.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumArray300.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumStruct.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.DfsEnumStruct.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.NetrDfsEnumEx.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Netdfs.NetrDfsEnumEx.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrCloseHandle.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrCloseHandle.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrConnect2.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrConnect2.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrConnect4.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrConnect4.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrOpenDomain.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrOpenDomain.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrSamEntry.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrSamEntry.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrSamArray.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrSamArray.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrEnumerateAliasesInDomain.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrEnumerateAliasesInDomain.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrOpenAlias.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrOpenAlias.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrGetMembersInAlias.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrGetMembersInAlias.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrRidWithAttribute.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrRidWithAttribute.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrRidWithAttributeArray.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Samr.SamrRidWithAttributeArray.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrAliasHandle.#ctor(SharpCifs.Dcerpc.DcerpcHandle,SharpCifs.Dcerpc.Msrpc.SamrDomainHandle,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrAliasHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrDomainHandle.#ctor(SharpCifs.Dcerpc.DcerpcHandle,SharpCifs.Dcerpc.Msrpc.SamrPolicyHandle,System.Int32,SharpCifs.Dcerpc.Rpc.SidT)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrDomainHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrPolicyHandle.#ctor(SharpCifs.Dcerpc.DcerpcHandle,System.String,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.SamrPolicyHandle.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo0.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo0.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr0.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr0.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo1.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo1.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr1.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr1.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo502.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfo502.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr502.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareInfoCtr502.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareEnumAll.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareEnumAll.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareGetInfo.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ShareGetInfo.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ServerInfo100.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ServerInfo100.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ServerGetInfo.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.ServerGetInfo.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.TimeOfDayInfo.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.TimeOfDayInfo.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.RemoteTod.Encode_in(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Msrpc.Srvsvc.RemoteTod.Decode_out(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrBuffer.Dec_ndr_string">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrHyper.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrHyper.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrLong.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrLong.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrObject.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrObject.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrShort.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrShort.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrSmall.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Ndr.NdrSmall.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.UuidT.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.UuidT.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.PolicyHandle.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.PolicyHandle.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.Unicode_string.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.Unicode_string.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.SidT.Encode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Dcerpc.Rpc.SidT.Decode(SharpCifs.Dcerpc.Ndr.NdrBuffer)">
            <exception cref="T:SharpCifs.Dcerpc.Ndr.NdrException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.Lmhosts.GetByName(System.String)">
            <summary>
            This is really just for
            <see cref="T:SharpCifs.UniAddress">Jcifs.UniAddress</see>
            . It does
            not throw an
            <see cref="T:SharpCifs.Util.Sharpen.UnknownHostException">Sharpen.UnknownHostException</see>
            because this
            is queried frequently and exceptions would be rather costly to
            throw on a regular basis here.
            </summary>
        </member>
        <member name="M:SharpCifs.Netbios.Lmhosts.Populate(System.IO.StreamReader)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NameServiceClient.EnsureOpen(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NameServiceClient.Send(SharpCifs.Netbios.NameServicePacket,SharpCifs.Netbios.NameServicePacket,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NameServiceClient.GetAllByName(SharpCifs.Netbios.Name,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NameServiceClient.GetByName(SharpCifs.Netbios.Name,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NameServiceClient.GetNodeStatus(SharpCifs.Netbios.NbtAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Netbios.NbtAddress" で無視されました -->
        <member name="F:SharpCifs.Netbios.NbtAddress.MasterBrowserName">
            <summary>
            This is a special name for querying the master browser that serves the
            list of hosts found in "Network Neighborhood".
            </summary>
            <remarks>
            This is a special name for querying the master browser that serves the
            list of hosts found in "Network Neighborhood".
            </remarks>
        </member>
        <member name="F:SharpCifs.Netbios.NbtAddress.SmbserverName">
            <summary>
            A special generic name specified when connecting to a host for which
            a name is not known.
            </summary>
            <remarks>
            A special generic name specified when connecting to a host for which
            a name is not known. Not all servers respond to this name.
            </remarks>
        </member>
        <member name="F:SharpCifs.Netbios.NbtAddress.BNode">
            <summary>A B node only broadcasts name queries.</summary>
            <remarks>
            A B node only broadcasts name queries. This is the default if a
            nameserver such as WINS or Samba is not specified.
            </remarks>
        </member>
        <member name="F:SharpCifs.Netbios.NbtAddress.PNode">
            <summary>
            A Point-to-Point node, or P node, unicasts queries to a nameserver
            only.
            </summary>
            <remarks>
            A Point-to-Point node, or P node, unicasts queries to a nameserver
            only. Natrually the <code>jcifs.netbios.nameserver</code> property must
            be set.
            </remarks>
        </member>
        <member name="F:SharpCifs.Netbios.NbtAddress.MNode">
            <summary>
            Try Broadcast queries first, then try to resolve the name using the
            nameserver.
            </summary>
            <remarks>
            Try Broadcast queries first, then try to resolve the name using the
            nameserver.
            </remarks>
        </member>
        <member name="F:SharpCifs.Netbios.NbtAddress.HNode">
            <summary>A Hybrid node tries to resolve a name using the nameserver first.</summary>
            <remarks>
            A Hybrid node tries to resolve a name using the nameserver first. If
            that fails use the broadcast address. This is the default if a nameserver
            is provided. This is the behavior of Microsoft Windows machines.
            </remarks>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.DoNameQuery(SharpCifs.Netbios.Name,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetLocalHost">
            <summary>Retrieves the local host address.</summary>
            <remarks>Retrieves the local host address.</remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">
            This is not likely as the IP returned
            by <code>InetAddress</code> should be available
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetByName(System.String)">
            <summary>Determines the address of a host given it's host name.</summary>
            <remarks>
            Determines the address of a host given it's host name. The name can be a NetBIOS name like
            "freto" or an IP address like "192.168.1.15". It cannot be a DNS name;
            the analygous
            <see cref="T:SharpCifs.UniAddress">Jcifs.UniAddress</see>
            or
            <see cref="T:System.Net.IPAddress">System.Net.IPAddress</see>
            <code>getByName</code> methods can be used for that.
            </remarks>
            <param name="host">hostname to resolve</param>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if there is an error resolving the name
            </exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Netbios.NbtAddress.GetByName(System.String,System.Int32,System.String)" で無視されました -->
        <member name="M:SharpCifs.Netbios.NbtAddress.GetByName(System.String,System.Int32,System.String,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetAllByName(System.String,System.Int32,System.String,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetAllByAddress(System.String)">
            <summary>Retrieve all addresses of a host by it's address.</summary>
            <remarks>
            Retrieve all addresses of a host by it's address. NetBIOS hosts can
            have many names for a given IP address. The name and IP address make the
            NetBIOS address. This provides a way to retrieve the other names for a
            host with the same IP address.
            </remarks>
            <param name="host">hostname to lookup all addresses for</param>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if there is an error resolving the name
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetAllByAddress(System.String,System.Int32,System.String)">
            <summary>Retrieve all addresses of a host by it's address.</summary>
            <remarks>
            Retrieve all addresses of a host by it's address. NetBIOS hosts can
            have many names for a given IP address. The name and IP address make
            the NetBIOS address. This provides a way to retrieve the other names
            for a host with the same IP address.  See
            <see cref="M:SharpCifs.Netbios.NbtAddress.GetByName(System.String)">GetByName(string)</see>
            for a description of <code>type</code>
            and <code>scope</code>.
            </remarks>
            <param name="host">hostname to lookup all addresses for</param>
            <param name="type">the hexcode of the name</param>
            <param name="scope">the scope of the name</param>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if there is an error resolving the name
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetAllByAddress(SharpCifs.Netbios.NbtAddress)">
            <summary>Retrieve all addresses of a host by it's address.</summary>
            <remarks>
            Retrieve all addresses of a host by it's address. NetBIOS hosts can
            have many names for a given IP address. The name and IP address make the
            NetBIOS address. This provides a way to retrieve the other names for a
            host with the same IP address.
            </remarks>
            <param name="addr">the address to query</param>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if address cannot be resolved</exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.CheckData">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.CheckNodeStatusData">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.IsGroupAddress">
            <summary>Determines if the address is a group address.</summary>
            <remarks>
            Determines if the address is a group address. This is also
            known as a workgroup name or group name.
            </remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetNodeType">
            <summary>Checks the node type of this address.</summary>
            <remarks>Checks the node type of this address.</remarks>
            <returns>
            
            <see cref="F:SharpCifs.Netbios.NbtAddress.BNode">B_NODE</see>
            ,
            <see cref="F:SharpCifs.Netbios.NbtAddress.PNode">P_NODE</see>
            ,
            <see cref="F:SharpCifs.Netbios.NbtAddress.MNode">M_NODE</see>
            ,
            <see cref="F:SharpCifs.Netbios.NbtAddress.HNode">H_NODE</see>
            </returns>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.IsBeingDeleted">
            <summary>Determines if this address in the process of being deleted.</summary>
            <remarks>Determines if this address in the process of being deleted.</remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.IsInConflict">
            <summary>Determines if this address in conflict with another address.</summary>
            <remarks>Determines if this address in conflict with another address.</remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.IsActive">
            <summary>Determines if this address is active.</summary>
            <remarks>Determines if this address is active.</remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.IsPermanent">
            <summary>Determines if this address is set to be permanent.</summary>
            <remarks>Determines if this address is set to be permanent.</remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if the host cannot be resolved to find out.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetMacAddress">
            <summary>Retrieves the MAC address of the remote network interface.</summary>
            <remarks>Retrieves the MAC address of the remote network interface. Samba returns all zeros.
            </remarks>
            <returns>the MAC address as an array of six bytes</returns>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">
            if the host cannot be resolved to
            determine the MAC address.
            </exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetHostName">
            <summary>The hostname of this address.</summary>
            <remarks>
            The hostname of this address. If the hostname is null the local machines
            IP address is returned.
            </remarks>
            <returns>the text representation of the hostname associated with this address</returns>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetAddress">
            <summary>Returns the raw IP address of this NbtAddress.</summary>
            <remarks>
            Returns the raw IP address of this NbtAddress. The result is in network
            byte order: the highest order byte of the address is in getAddress()[0].
            </remarks>
            <returns>a four byte array</returns>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetInetAddress">
            <summary>To convert this address to an <code>InetAddress</code>.</summary>
            <remarks>To convert this address to an <code>InetAddress</code>.</remarks>
            <returns>
            the
            <see cref="T:System.Net.IPAddress">System.Net.IPAddress</see>
            representation of this address.
            </returns>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetHostAddress">
            <summary>
            Returns this IP adress as a
            <see cref="T:System.String">string</see>
            in the form "%d.%d.%d.%d".
            </summary>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetNameType">
            <summary>Returned the hex code associated with this name(e.g.</summary>
            <remarks>Returned the hex code associated with this name(e.g. 0x20 is for the file service)
            </remarks>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.GetHashCode">
            <summary>Returns a hashcode for this IP address.</summary>
            <remarks>
            Returns a hashcode for this IP address. The hashcode comes from the IP address
            and is not generated from the string representation. So because NetBIOS nodes
            can have many names, all names associated with an IP will have the same
            hashcode.
            </remarks>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.Equals(System.Object)">
            <summary>Determines if this address is equal two another.</summary>
            <remarks>
            Determines if this address is equal two another. Only the IP Addresses
            are compared. Similar to the
            <see cref="M:SharpCifs.Netbios.NbtAddress.GetHashCode">GetHashCode()</see>
            method, the comparison
            is based on the integer IP address and not the string representation.
            </remarks>
        </member>
        <member name="M:SharpCifs.Netbios.NbtAddress.ToString">
            <summary>
            Returns the
            <see cref="T:System.String">string</see>
            representaion of this address.
            </summary>
        </member>
        <member name="M:SharpCifs.Netbios.SessionRequestPacket.ReadTrailerWireFormat(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionRetargetResponsePacket.ReadTrailerWireFormat(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionServicePacket.Readn(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionServicePacket.ReadPacketType(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionServicePacket.ReadWireFormat(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionServicePacket.ReadHeaderWireFormat(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Netbios.SessionServicePacket.ReadTrailerWireFormat(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:SharpCifs.Ntlmssp.NtlmFlags">
            <summary>Flags used during negotiation of NTLMSSP authentication.</summary>
            <remarks>Flags used during negotiation of NTLMSSP authentication.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateUnicode">
            <summary>Indicates whether Unicode strings are supported or used.</summary>
            <remarks>Indicates whether Unicode strings are supported or used.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateOem">
            <summary>Indicates whether OEM strings are supported or used.</summary>
            <remarks>Indicates whether OEM strings are supported or used.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspRequestTarget">
            <summary>
            Indicates whether the authentication target is requested from
            the server.
            </summary>
            <remarks>
            Indicates whether the authentication target is requested from
            the server.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateSign">
            <summary>
            Specifies that communication across the authenticated channel
            should carry a digital signature (message integrity).
            </summary>
            <remarks>
            Specifies that communication across the authenticated channel
            should carry a digital signature (message integrity).
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateSeal">
            <summary>
            Specifies that communication across the authenticated channel
            should be encrypted (message confidentiality).
            </summary>
            <remarks>
            Specifies that communication across the authenticated channel
            should be encrypted (message confidentiality).
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateDatagramStyle">
            <summary>Indicates datagram authentication.</summary>
            <remarks>Indicates datagram authentication.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateLmKey">
            <summary>
            Indicates that the LAN Manager session key should be used for
            signing and sealing authenticated communication.
            </summary>
            <remarks>
            Indicates that the LAN Manager session key should be used for
            signing and sealing authenticated communication.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateNtlm">
            <summary>Indicates support for NTLM authentication.</summary>
            <remarks>Indicates support for NTLM authentication.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateOemDomainSupplied">
            <summary>
            Indicates whether the OEM-formatted domain name in which the
            client workstation has membership is supplied in the Type-1 message.
            </summary>
            <remarks>
            Indicates whether the OEM-formatted domain name in which the
            client workstation has membership is supplied in the Type-1 message.
            This is used in the negotation of local authentication.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateOemWorkstationSupplied">
            <summary>
            Indicates whether the OEM-formatted workstation name is supplied
            in the Type-1 message.
            </summary>
            <remarks>
            Indicates whether the OEM-formatted workstation name is supplied
            in the Type-1 message.  This is used in the negotiation of local
            authentication.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateLocalCall">
            <summary>
            Sent by the server to indicate that the server and client are
            on the same machine.
            </summary>
            <remarks>
            Sent by the server to indicate that the server and client are
            on the same machine.  This implies that the server will include
            a local security context handle in the Type 2 message, for
            use in local authentication.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateAlwaysSign">
            <summary>
            Indicates that authenticated communication between the client
            and server should carry a "dummy" digital signature.
            </summary>
            <remarks>
            Indicates that authenticated communication between the client
            and server should carry a "dummy" digital signature.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspTargetTypeDomain">
            <summary>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a domain.
            </summary>
            <remarks>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a domain.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspTargetTypeServer">
            <summary>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a server.
            </summary>
            <remarks>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a server.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspTargetTypeShare">
            <summary>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a share (presumably for share-level
            authentication).
            </summary>
            <remarks>
            Sent by the server in the Type 2 message to indicate that the
            target authentication realm is a share (presumably for share-level
            authentication).
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateNtlm2">
            <summary>
            Indicates that the NTLM2 signing and sealing scheme should be used
            for protecting authenticated communications.
            </summary>
            <remarks>
            Indicates that the NTLM2 signing and sealing scheme should be used
            for protecting authenticated communications.  This refers to a
            particular session security scheme, and is not related to the use
            of NTLMv2 authentication.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiateTargetInfo">
            <summary>
            Sent by the server in the Type 2 message to indicate that it is
            including a Target Information block in the message.
            </summary>
            <remarks>
            Sent by the server in the Type 2 message to indicate that it is
            including a Target Information block in the message.  The Target
            Information block is used in the calculation of the NTLMv2 response.
            </remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiate128">
            <summary>Indicates that 128-bit encryption is supported.</summary>
            <remarks>Indicates that 128-bit encryption is supported.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmFlags.NtlmsspNegotiate56">
            <summary>Indicates that 56-bit encryption is supported.</summary>
            <remarks>Indicates that 56-bit encryption is supported.</remarks>
        </member>
        <member name="T:SharpCifs.Ntlmssp.NtlmMessage">
            <summary>Abstract superclass for all NTLMSSP messages.</summary>
            <remarks>Abstract superclass for all NTLMSSP messages.</remarks>
        </member>
        <member name="F:SharpCifs.Ntlmssp.NtlmMessage.NtlmsspSignature">
            <summary>The NTLMSSP "preamble".</summary>
            <remarks>The NTLMSSP "preamble".</remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.NtlmMessage.GetFlags">
            <summary>Returns the flags currently in use for this message.</summary>
            <remarks>Returns the flags currently in use for this message.</remarks>
            <returns>
            An <code>int</code> containing the flags in use for this
            message.
            </returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.NtlmMessage.SetFlags(System.Int32)">
            <summary>Sets the flags for this message.</summary>
            <remarks>Sets the flags for this message.</remarks>
            <param name="flags">The flags for this message.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.NtlmMessage.GetFlag(System.Int32)">
            <summary>Returns the status of the specified flag.</summary>
            <remarks>Returns the status of the specified flag.</remarks>
            <param name="flag">The flag to test (i.e., <code>NTLMSSP_NEGOTIATE_OEM</code>).</param>
            <returns>A <code>boolean</code> indicating whether the flag is set.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.NtlmMessage.SetFlag(System.Int32,System.Boolean)">
            <summary>Sets or clears the specified flag.</summary>
            <remarks>Sets or clears the specified flag.</remarks>
            <param name="flag">
            The flag to set/clear (i.e.,
            <code>NTLMSSP_NEGOTIATE_OEM</code>).
            </param>
            <param name="value">
            Indicates whether to set (<code>true</code>) or
            clear (<code>false</code>) the specified flag.
            </param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.NtlmMessage.ToByteArray">
            <summary>Returns the raw byte representation of this message.</summary>
            <remarks>Returns the raw byte representation of this message.</remarks>
            <returns>A <code>byte[]</code> containing the raw message material.</returns>
        </member>
        <member name="T:SharpCifs.Ntlmssp.Type1Message">
            <summary>Represents an NTLMSSP Type-1 message.</summary>
            <remarks>Represents an NTLMSSP Type-1 message.</remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.#ctor">
            <summary>
            Creates a Type-1 message using default values from the current
            environment.
            </summary>
            <remarks>
            Creates a Type-1 message using default values from the current
            environment.
            </remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.#ctor(System.Int32,System.String,System.String)">
            <summary>Creates a Type-1 message with the specified parameters.</summary>
            <remarks>Creates a Type-1 message with the specified parameters.</remarks>
            <param name="flags">The flags to apply to this message.</param>
            <param name="suppliedDomain">The supplied authentication domain.</param>
            <param name="suppliedWorkstation">The supplied workstation name.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.#ctor(System.Byte[])">
            <summary>Creates a Type-1 message using the given raw Type-1 material.</summary>
            <remarks>Creates a Type-1 message using the given raw Type-1 material.</remarks>
            <param name="material">The raw Type-1 material used to construct this message.</param>
            <exception cref="T:System.IO.IOException">
            If an error occurs while parsing the material.
            </exception>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.GetSuppliedDomain">
            <summary>Returns the supplied authentication domain.</summary>
            <remarks>Returns the supplied authentication domain.</remarks>
            <returns>A <code>String</code> containing the supplied domain.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.SetSuppliedDomain(System.String)">
            <summary>Sets the supplied authentication domain for this message.</summary>
            <remarks>Sets the supplied authentication domain for this message.</remarks>
            <param name="suppliedDomain">The supplied domain for this message.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.GetSuppliedWorkstation">
            <summary>Returns the supplied workstation name.</summary>
            <remarks>Returns the supplied workstation name.</remarks>
            <returns>A <code>String</code> containing the supplied workstation name.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.SetSuppliedWorkstation(System.String)">
            <summary>Sets the supplied workstation name for this message.</summary>
            <remarks>Sets the supplied workstation name for this message.</remarks>
            <param name="suppliedWorkstation">The supplied workstation for this message.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.GetDefaultFlags">
            <summary>
            Returns the default flags for a generic Type-1 message in the
            current environment.
            </summary>
            <remarks>
            Returns the default flags for a generic Type-1 message in the
            current environment.
            </remarks>
            <returns>An <code>int</code> containing the default flags.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.GetDefaultDomain">
            <summary>Returns the default domain from the current environment.</summary>
            <remarks>Returns the default domain from the current environment.</remarks>
            <returns>A <code>String</code> containing the default domain.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.GetDefaultWorkstation">
            <summary>Returns the default workstation from the current environment.</summary>
            <remarks>Returns the default workstation from the current environment.</remarks>
            <returns>A <code>String</code> containing the default workstation.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type1Message.Parse(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:SharpCifs.Ntlmssp.Type2Message">
            <summary>Represents an NTLMSSP Type-2 message.</summary>
            <remarks>Represents an NTLMSSP Type-2 message.</remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.#ctor">
            <summary>
            Creates a Type-2 message using default values from the current
            environment.
            </summary>
            <remarks>
            Creates a Type-2 message using default values from the current
            environment.
            </remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.#ctor(SharpCifs.Ntlmssp.Type1Message)">
            <summary>
            Creates a Type-2 message in response to the given Type-1 message
            using default values from the current environment.
            </summary>
            <remarks>
            Creates a Type-2 message in response to the given Type-1 message
            using default values from the current environment.
            </remarks>
            <param name="type1">The Type-1 message which this represents a response to.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.#ctor(SharpCifs.Ntlmssp.Type1Message,System.Byte[],System.String)">
            <summary>Creates a Type-2 message in response to the given Type-1 message.</summary>
            <remarks>Creates a Type-2 message in response to the given Type-1 message.</remarks>
            <param name="type1">The Type-1 message which this represents a response to.</param>
            <param name="challenge">The challenge from the domain controller/server.</param>
            <param name="target">The authentication target.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.#ctor(System.Int32,System.Byte[],System.String)">
            <summary>Creates a Type-2 message with the specified parameters.</summary>
            <remarks>Creates a Type-2 message with the specified parameters.</remarks>
            <param name="flags">The flags to apply to this message.</param>
            <param name="challenge">The challenge from the domain controller/server.</param>
            <param name="target">The authentication target.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.#ctor(System.Byte[])">
            <summary>Creates a Type-2 message using the given raw Type-2 material.</summary>
            <remarks>Creates a Type-2 message using the given raw Type-2 material.</remarks>
            <param name="material">The raw Type-2 material used to construct this message.</param>
            <exception cref="T:System.IO.IOException">If an error occurs while parsing the material.
            </exception>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetChallenge">
            <summary>Returns the challenge for this message.</summary>
            <remarks>Returns the challenge for this message.</remarks>
            <returns>A <code>byte[]</code> containing the challenge.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.SetChallenge(System.Byte[])">
            <summary>Sets the challenge for this message.</summary>
            <remarks>Sets the challenge for this message.</remarks>
            <param name="challenge">The challenge from the domain controller/server.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetTarget">
            <summary>Returns the authentication target.</summary>
            <remarks>Returns the authentication target.</remarks>
            <returns>A <code>String</code> containing the authentication target.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.SetTarget(System.String)">
            <summary>Sets the authentication target.</summary>
            <remarks>Sets the authentication target.</remarks>
            <param name="target">The authentication target.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetTargetInformation">
            <summary>Returns the target information block.</summary>
            <remarks>Returns the target information block.</remarks>
            <returns>
            A <code>byte[]</code> containing the target information block.
            The target information block is used by the client to create an
            NTLMv2 response.
            </returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.SetTargetInformation(System.Byte[])">
            <summary>Sets the target information block.</summary>
            <remarks>
            Sets the target information block.
            The target information block is used by the client to create
            an NTLMv2 response.
            </remarks>
            <param name="targetInformation">The target information block.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetContext">
            <summary>Returns the local security context.</summary>
            <remarks>Returns the local security context.</remarks>
            <returns>
            A <code>byte[]</code> containing the local security
            context.  This is used by the client to negotiate local
            authentication.
            </returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.SetContext(System.Byte[])">
            <summary>Sets the local security context.</summary>
            <remarks>
            Sets the local security context.  This is used by the client
            to negotiate local authentication.
            </remarks>
            <param name="context">The local security context.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetDefaultFlags">
            <summary>
            Returns the default flags for a generic Type-2 message in the
            current environment.
            </summary>
            <remarks>
            Returns the default flags for a generic Type-2 message in the
            current environment.
            </remarks>
            <returns>An <code>int</code> containing the default flags.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetDefaultFlags(SharpCifs.Ntlmssp.Type1Message)">
            <summary>
            Returns the default flags for a Type-2 message created in response
            to the given Type-1 message in the current environment.
            </summary>
            <remarks>
            Returns the default flags for a Type-2 message created in response
            to the given Type-1 message in the current environment.
            </remarks>
            <returns>An <code>int</code> containing the default flags.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.GetDefaultDomain">
            <summary>Returns the default domain from the current environment.</summary>
            <remarks>Returns the default domain from the current environment.</remarks>
            <returns>A <code>String</code> containing the domain.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type2Message.Parse(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:SharpCifs.Ntlmssp.Type3Message">
            <summary>Represents an NTLMSSP Type-3 message.</summary>
            <remarks>Represents an NTLMSSP Type-3 message.</remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.#ctor">
            <summary>
            Creates a Type-3 message using default values from the current
            environment.
            </summary>
            <remarks>
            Creates a Type-3 message using default values from the current
            environment.
            </remarks>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.#ctor(SharpCifs.Ntlmssp.Type2Message)">
            <summary>
            Creates a Type-3 message in response to the given Type-2 message
            using default values from the current environment.
            </summary>
            <remarks>
            Creates a Type-3 message in response to the given Type-2 message
            using default values from the current environment.
            </remarks>
            <param name="type2">The Type-2 message which this represents a response to.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.#ctor(SharpCifs.Ntlmssp.Type2Message,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Creates a Type-3 message in response to the given Type-2 message.</summary>
            <remarks>Creates a Type-3 message in response to the given Type-2 message.</remarks>
            <param name="type2">The Type-2 message which this represents a response to.</param>
            <param name="password">The password to use when constructing the response.</param>
            <param name="domain">The domain in which the user has an account.</param>
            <param name="user">The username for the authenticating user.</param>
            <param name="workstation">
            The workstation from which authentication is
            taking place.
            </param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.#ctor(System.Int32,System.Byte[],System.Byte[],System.String,System.String,System.String)">
            <summary>Creates a Type-3 message with the specified parameters.</summary>
            <remarks>Creates a Type-3 message with the specified parameters.</remarks>
            <param name="flags">The flags to apply to this message.</param>
            <param name="lmResponse">The LanManager/LMv2 response.</param>
            <param name="ntResponse">The NT/NTLMv2 response.</param>
            <param name="domain">The domain in which the user has an account.</param>
            <param name="user">The username for the authenticating user.</param>
            <param name="workstation">
            The workstation from which authentication is
            taking place.
            </param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.#ctor(System.Byte[])">
            <summary>Creates a Type-3 message using the given raw Type-3 material.</summary>
            <remarks>Creates a Type-3 message using the given raw Type-3 material.</remarks>
            <param name="material">The raw Type-3 material used to construct this message.</param>
            <exception cref="T:System.IO.IOException">If an error occurs while parsing the material.
            </exception>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetLMResponse">
            <summary>Returns the LanManager/LMv2 response.</summary>
            <remarks>Returns the LanManager/LMv2 response.</remarks>
            <returns>A <code>byte[]</code> containing the LanManager response.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetLmResponse(System.Byte[])">
            <summary>Sets the LanManager/LMv2 response for this message.</summary>
            <remarks>Sets the LanManager/LMv2 response for this message.</remarks>
            <param name="lmResponse">The LanManager response.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetNTResponse">
            <summary>Returns the NT/NTLMv2 response.</summary>
            <remarks>Returns the NT/NTLMv2 response.</remarks>
            <returns>A <code>byte[]</code> containing the NT/NTLMv2 response.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetNtResponse(System.Byte[])">
            <summary>Sets the NT/NTLMv2 response for this message.</summary>
            <remarks>Sets the NT/NTLMv2 response for this message.</remarks>
            <param name="ntResponse">The NT/NTLMv2 response.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDomain">
            <summary>Returns the domain in which the user has an account.</summary>
            <remarks>Returns the domain in which the user has an account.</remarks>
            <returns>A <code>String</code> containing the domain for the user.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetDomain(System.String)">
            <summary>Sets the domain for this message.</summary>
            <remarks>Sets the domain for this message.</remarks>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetUser">
            <summary>Returns the username for the authenticating user.</summary>
            <remarks>Returns the username for the authenticating user.</remarks>
            <returns>A <code>String</code> containing the user for this message.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetUser(System.String)">
            <summary>Sets the user for this message.</summary>
            <remarks>Sets the user for this message.</remarks>
            <param name="user">The user.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetWorkstation">
            <summary>Returns the workstation from which authentication is being performed.</summary>
            <remarks>Returns the workstation from which authentication is being performed.</remarks>
            <returns>A <code>String</code> containing the workstation.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetWorkstation(System.String)">
            <summary>Sets the workstation for this message.</summary>
            <remarks>Sets the workstation for this message.</remarks>
            <param name="workstation">The workstation.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetMasterKey">
            <summary>
            The real session key if the regular session key is actually
            the encrypted version used for key exchange.
            </summary>
            <remarks>
            The real session key if the regular session key is actually
            the encrypted version used for key exchange.
            </remarks>
            <returns>A <code>byte[]</code> containing the session key.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetSessionKey">
            <summary>Returns the session key.</summary>
            <remarks>Returns the session key.</remarks>
            <returns>A <code>byte[]</code> containing the session key.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.SetSessionKey(System.Byte[])">
            <summary>Sets the session key.</summary>
            <remarks>Sets the session key.</remarks>
            <param name="sessionKey">The session key.</param>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultFlags">
            <summary>
            Returns the default flags for a generic Type-3 message in the
            current environment.
            </summary>
            <remarks>
            Returns the default flags for a generic Type-3 message in the
            current environment.
            </remarks>
            <returns>An <code>int</code> containing the default flags.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultFlags(SharpCifs.Ntlmssp.Type2Message)">
            <summary>
            Returns the default flags for a Type-3 message created in response
            to the given Type-2 message in the current environment.
            </summary>
            <remarks>
            Returns the default flags for a Type-3 message created in response
            to the given Type-2 message in the current environment.
            </remarks>
            <returns>An <code>int</code> containing the default flags.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetLMResponse(SharpCifs.Ntlmssp.Type2Message,System.String)">
            <summary>
            Constructs the LanManager response to the given Type-2 message using
            the supplied password.
            </summary>
            <remarks>
            Constructs the LanManager response to the given Type-2 message using
            the supplied password.
            </remarks>
            <param name="type2">The Type-2 message.</param>
            <param name="password">The password.</param>
            <returns>A <code>byte[]</code> containing the LanManager response.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetNTResponse(SharpCifs.Ntlmssp.Type2Message,System.String)">
            <summary>
            Constructs the NT response to the given Type-2 message using
            the supplied password.
            </summary>
            <remarks>
            Constructs the NT response to the given Type-2 message using
            the supplied password.
            </remarks>
            <param name="type2">The Type-2 message.</param>
            <param name="password">The password.</param>
            <returns>A <code>byte[]</code> containing the NT response.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultDomain">
            <summary>Returns the default domain from the current environment.</summary>
            <remarks>Returns the default domain from the current environment.</remarks>
            <returns>The default domain.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultUser">
            <summary>Returns the default user from the current environment.</summary>
            <remarks>Returns the default user from the current environment.</remarks>
            <returns>The default user.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultPassword">
            <summary>Returns the default password from the current environment.</summary>
            <remarks>Returns the default password from the current environment.</remarks>
            <returns>The default password.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.GetDefaultWorkstation">
            <summary>Returns the default workstation from the current environment.</summary>
            <remarks>Returns the default workstation from the current environment.</remarks>
            <returns>The default workstation.</returns>
        </member>
        <member name="M:SharpCifs.Ntlmssp.Type3Message.Parse(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.Ace" で無視されました -->
        <member name="M:SharpCifs.Smb.Ace.IsAllow">
            <summary>Returns true if this ACE is an allow ACE and false if it is a deny ACE.</summary>
            <remarks>Returns true if this ACE is an allow ACE and false if it is a deny ACE.</remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.Ace.IsInherited" で無視されました -->
        <member name="M:SharpCifs.Smb.Ace.GetFlags">
            <summary>Returns the flags for this ACE.</summary>
            <remarks>
            Returns the flags for this ACE. The <tt>isInherited()</tt>
            method checks the <tt>FLAGS_INHERITED</tt> bit in these flags.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Ace.GetApplyToText">
            <summary>
            Returns the 'Apply To' text for inheritance of ACEs on
            directories such as 'This folder, subfolder and files'.
            </summary>
            <remarks>
            Returns the 'Apply To' text for inheritance of ACEs on
            directories such as 'This folder, subfolder and files'. For
            files the text is always 'This object only'.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Ace.GetAccessMask">
            <summary>Returns the access mask accociated with this ACE.</summary>
            <remarks>
            Returns the access mask accociated with this ACE. Use the
            constants for <tt>FILE_READ_DATA</tt>, <tt>FILE_WRITE_DATA</tt>,
            <tt>READ_CONTROL</tt>, <tt>GENERIC_ALL</tt>, etc with bitwise
            operators to determine which bits of the mask are on or off.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Ace.GetSid">
            <summary>Return the SID associated with this ACE.</summary>
            <remarks>Return the SID associated with this ACE.</remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.Ace.ToString" で無視されました -->
        <member name="M:SharpCifs.Smb.Dfs.GetTrustedDomains(SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbAuthException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Dfs.IsTrustedDomain(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbAuthException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Dfs.GetDc(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbAuthException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Dfs.GetReferral(SharpCifs.Smb.SmbTransport,System.String,System.String,System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbAuthException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Dfs.Resolve(System.String,System.String,System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbAuthException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.DosFileFilter.Accept(SharpCifs.Smb.SmbFile)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="T:SharpCifs.Smb.NtlmAuthenticator">
            <summary>
            This class can be extended by applications that wish to trap authentication related exceptions and automatically retry the exceptional operation with different credentials.
            </summary>
            <remarks>
            This class can be extended by applications that wish to trap authentication related exceptions and automatically retry the exceptional operation with different credentials. Read <a href="../../../authhandler.html">jCIFS Exceptions and NtlmAuthenticator</a> for complete details.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmAuthenticator.SetDefault(SharpCifs.Smb.NtlmAuthenticator)">
            <summary>Set the default <tt>NtlmAuthenticator</tt>.</summary>
            <remarks>
            Set the default <tt>NtlmAuthenticator</tt>. Once the default authenticator is set it cannot be changed. Calling this metho again will have no effect.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmAuthenticator.RequestNtlmPasswordAuthentication(System.String,SharpCifs.Smb.SmbAuthException)">
            <summary>
            Used internally by jCIFS when an <tt>SmbAuthException</tt> is trapped to retrieve new user credentials.
            </summary>
            <remarks>
            Used internally by jCIFS when an <tt>SmbAuthException</tt> is trapped to retrieve new user credentials.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmAuthenticator.GetNtlmPasswordAuthentication">
            <summary>An application extending this class must provide an implementation for this method that returns new user credentials try try when accessing SMB resources described by the <tt>getRequestingURL</tt> and <tt>getRequestingException</tt> methods.
            </summary>
            <remarks>
            An application extending this class must provide an implementation for this method that returns new user credentials try try when accessing SMB resources described by the <tt>getRequestingURL</tt> and <tt>getRequestingException</tt> methods.
            If this method returns <tt>null</tt> the <tt>SmbAuthException</tt> that triggered the authenticator check will simply be rethrown. The default implementation returns <tt>null</tt>.
            </remarks>
        </member>
        <member name="T:SharpCifs.Smb.NtlmContext">
            <summary>For initiating NTLM authentication (including NTLMv2).</summary>
            <remarks>For initiating NTLM authentication (including NTLMv2). If you want to add NTLMv2 authentication support to something this is what you want to use. See the code for details. Note that JCIFS does not implement the acceptor side of NTLM authentication.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmContext.InitSecContext(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.NtlmPasswordAuthentication" で無視されました -->
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetPreNtlmResponse(System.String,System.Byte[])">
            <summary>
            Generate the ANSI DES hash for the password associated with these credentials.
            </summary>
            <remarks>
            Generate the ANSI DES hash for the password associated with these credentials.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetNtlmResponse(System.String,System.Byte[])">
            <summary>
            Generate the Unicode MD4 hash for the password associated with these credentials.
            </summary>
            <remarks>
            Generate the Unicode MD4 hash for the password associated with these credentials.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetLMv2Response(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>Creates the LMv2 response for the supplied information.</summary>
            <remarks>Creates the LMv2 response for the supplied information.</remarks>
            <param name="domain">The domain in which the username exists.</param>
            <param name="user">The username.</param>
            <param name="password">The user's password.</param>
            <param name="challenge">The server challenge.</param>
            <param name="clientChallenge">The client challenge (nonce).</param>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.#ctor(System.String)">
            <summary>
            Create an <tt>NtlmPasswordAuthentication</tt> object from the userinfo
            component of an SMB URL like "<tt>domain;user:pass</tt>".
            </summary>
            <remarks>
            Create an <tt>NtlmPasswordAuthentication</tt> object from the userinfo
            component of an SMB URL like "<tt>domain;user:pass</tt>". This constructor
            is used internally be jCIFS when parsing SMB URLs.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.#ctor(System.String,System.String,System.String)">
            <summary>
            Create an <tt>NtlmPasswordAuthentication</tt> object from a
            domain, username, and password.
            </summary>
            <remarks>
            Create an <tt>NtlmPasswordAuthentication</tt> object from a
            domain, username, and password. Parameters that are <tt>null</tt>
            will be substituted with <tt>jcifs.smb.client.domain</tt>,
            <tt>jcifs.smb.client.username</tt>, <tt>jcifs.smb.client.password</tt>
            property values.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.#ctor(System.String,System.String,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Create an <tt>NtlmPasswordAuthentication</tt> object with raw password
            hashes.
            </summary>
            <remarks>
            Create an <tt>NtlmPasswordAuthentication</tt> object with raw password
            hashes. This is used exclusively by the <tt>jcifs.http.NtlmSsp</tt>
            class which is in turn used by NTLM HTTP authentication functionality.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetDomain">
            <summary>Returns the domain.</summary>
            <remarks>Returns the domain.</remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetUsername">
            <summary>Returns the username.</summary>
            <remarks>Returns the username.</remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetPassword">
            <summary>
            Returns the password in plain text or <tt>null</tt> if the raw password
            hashes were used to construct this <tt>NtlmPasswordAuthentication</tt>
            object which will be the case when NTLM HTTP Authentication is
            used.
            </summary>
            <remarks>
            Returns the password in plain text or <tt>null</tt> if the raw password
            hashes were used to construct this <tt>NtlmPasswordAuthentication</tt>
            object which will be the case when NTLM HTTP Authentication is
            used. There is no way to retrieve a users password in plain text unless
            it is supplied by the user at runtime.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetName">
            <summary>
            Return the domain and username in the format:
            <tt>domain\\username</tt>.
            </summary>
            <remarks>
            Return the domain and username in the format:
            <tt>domain\\username</tt>. This is equivalent to <tt>toString()</tt>.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetAnsiHash(System.Byte[])">
            <summary>
            Computes the 24 byte ANSI password hash given the 8 byte server challenge.
            </summary>
            <remarks>
            Computes the 24 byte ANSI password hash given the 8 byte server challenge.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetUnicodeHash(System.Byte[])">
            <summary>
            Computes the 24 byte Unicode password hash given the 8 byte server challenge.
            </summary>
            <remarks>
            Computes the 24 byte Unicode password hash given the 8 byte server challenge.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetSigningKey(System.Byte[])">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetUserSessionKey(System.Byte[])">
            <summary>Returns the effective user session key.</summary>
            <remarks>Returns the effective user session key.</remarks>
            <param name="challenge">The server challenge.</param>
            <returns>
            A <code>byte[]</code> containing the effective user session key,
            used in SMB MAC signing and NTLMSSP signing and sealing.
            </returns>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetUserSessionKey(System.Byte[],System.Byte[],System.Int32)">
            <summary>Calculates the effective user session key.</summary>
            <remarks>Calculates the effective user session key.</remarks>
            <param name="challenge">The server challenge.</param>
            <param name="dest">
            The destination array in which the user session key will be
            placed.
            </param>
            <param name="offset">
            The offset in the destination array at which the
            session key will start.
            </param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.Equals(System.Object)">
            <summary>
            Compares two <tt>NtlmPasswordAuthentication</tt> objects for
            equality.
            </summary>
            <remarks>
            Compares two <tt>NtlmPasswordAuthentication</tt> objects for
            equality. Two <tt>NtlmPasswordAuthentication</tt> objects are equal if
            their caseless domain and username fields are equal and either both hashes are external and they are equal or both internally supplied passwords are equal. If one <tt>NtlmPasswordAuthentication</tt> object has external hashes (meaning negotiated via NTLM HTTP Authentication) and the other does not they will not be equal. This is technically not correct however the server 8 byte challage would be required to compute and compare the password hashes but that it not available with this method.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.GetHashCode">
            <summary>Return the upcased username hash code.</summary>
            <remarks>Return the upcased username hash code.</remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.ToString">
            <summary>
            Return the domain and username in the format:
            <tt>domain\\username</tt>.
            </summary>
            <remarks>
            Return the domain and username in the format:
            <tt>domain\\username</tt>. This is equivalent to <tt>getName()</tt>.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.NtlmPasswordAuthentication.Unescape(System.String)">
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnsupportedEncodingException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SecurityDescriptor.#ctor(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SecurityDescriptor.Decode(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.Sid" で無視されました -->
        <member name="M:SharpCifs.Smb.Sid.ResolveSids(SharpCifs.Dcerpc.DcerpcHandle,SharpCifs.Dcerpc.Msrpc.LsaPolicyHandle,SharpCifs.Smb.Sid[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.ResolveSids0(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,SharpCifs.Smb.Sid[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.ResolveSids(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,SharpCifs.Smb.Sid[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.ResolveSids(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,SharpCifs.Smb.Sid[])">
            <summary>Resolve an array of SIDs using a cache and at most one MSRPC request.</summary>
            <remarks>
            Resolve an array of SIDs using a cache and at most one MSRPC request.
            
            This method will attempt
            to resolve SIDs using a cache and cache the results of any SIDs that
            required resolving with the authority. SID cache entries are currently not
            expired because under normal circumstances SID information never changes.
            </remarks>
            <param name="authorityServerName">
            The hostname of the server that should be queried. For maximum efficiency this should be the hostname of a domain controller however a member server will work as well and a domain controller may not return names for SIDs corresponding to local accounts for which the domain controller is not an authority.
            </param>
            <param name="auth">
            The credentials that should be used to communicate with the named server. As usual, <tt>null</tt> indicates that default credentials should be used.
            </param>
            <param name="sids">
            The SIDs that should be resolved. After this function is called, the names associated with the SIDs may be queried with the <tt>toDisplayString</tt>, <tt>getDomainName</tt>, and <tt>getAccountName</tt> methods.
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.GetServerSid(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.#ctor(System.String)">
            <summary>
            Construct a SID from it's textual representation such as
            <tt>S-1-5-21-1496946806-2192648263-3843101252-1029</tt>.
            </summary>
            <remarks>
            Construct a SID from it's textual representation such as
            <tt>S-1-5-21-1496946806-2192648263-3843101252-1029</tt>.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.#ctor(SharpCifs.Smb.Sid,System.Int32)">
            <summary>
            Construct a SID from a domain SID and an RID
            (relative identifier).
            </summary>
            <remarks>
            Construct a SID from a domain SID and an RID
            (relative identifier). For example, a domain SID
            <tt>S-1-5-21-1496946806-2192648263-3843101252</tt> and RID <tt>1029</tt> would
            yield the SID <tt>S-1-5-21-1496946806-2192648263-3843101252-1029</tt>.
            </remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.Sid.GetType" で無視されました -->
        <member name="M:SharpCifs.Smb.Sid.GetTypeText">
            <summary>
            Return text represeting the SID type suitable for display to
            users.
            </summary>
            <remarks>
            Return text represeting the SID type suitable for display to
            users. Text includes 'User', 'Domain group', 'Local group', etc.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Sid.GetDomainName">
            <summary>
            Return the domain name of this SID unless it could not be
            resolved in which case the numeric representation is returned.
            </summary>
            <remarks>
            Return the domain name of this SID unless it could not be
            resolved in which case the numeric representation is returned.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Sid.GetAccountName">
            <summary>
            Return the sAMAccountName of this SID unless it could not
            be resolved in which case the numeric RID is returned.
            </summary>
            <remarks>
            Return the sAMAccountName of this SID unless it could not
            be resolved in which case the numeric RID is returned. If this
            SID is a domain SID, this method will return an empty String.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.Sid.ToString">
            <summary>
            Return the numeric representation of this sid such as
            <tt>S-1-5-21-1496946806-2192648263-3843101252-1029</tt>.
            </summary>
            <remarks>
            Return the numeric representation of this sid such as
            <tt>S-1-5-21-1496946806-2192648263-3843101252-1029</tt>.
            </remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.Sid.ToDisplayString" で無視されました -->
        <member name="M:SharpCifs.Smb.Sid.Resolve(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <summary>Manually resolve this SID.</summary>
            <remarks>
            Manually resolve this SID. Normally SIDs are automatically
            resolved. However, if a SID is constructed explicitly using a SID
            constructor, JCIFS will have no knowledge of the server that created the
            SID and therefore cannot possibly resolve it automatically. In this case,
            this method will be necessary.
            </remarks>
            <param name="authorityServerName">The FQDN of the server that is an authority for the SID.
            </param>
            <param name="auth">Credentials suitable for accessing the SID's information.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.GetGroupMemberSids0(SharpCifs.Dcerpc.DcerpcHandle,SharpCifs.Dcerpc.Msrpc.SamrDomainHandle,SharpCifs.Smb.Sid,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.Sid.GetGroupMemberSids(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.Sid.GetLocalGroupsMap(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,System.Int32)" で無視されました -->
        <member name="T:SharpCifs.Smb.SigningDigest">
            <summary>To filter 0 len updates and for debugging</summary>
        </member>
        <member name="M:SharpCifs.Smb.SigningDigest.#ctor(System.Byte[],System.Boolean)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SigningDigest.#ctor(SharpCifs.Smb.SmbTransport,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SigningDigest.Sign(System.Byte[],System.Int32,System.Int32,SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <summary>Performs MAC signing of the SMB.</summary>
            <remarks>
            Performs MAC signing of the SMB.  This is done as follows.
            The signature field of the SMB is overwritted with the sequence number;
            The MD5 digest of the MAC signing key + the entire SMB is taken;
            The first 8 bytes of this are placed in the signature field.
            </remarks>
            <param name="data">The data.</param>
            <param name="offset">The starting offset at which the SMB header begins.</param>
            <param name="length">The length of the SMB data starting at offset.</param>
        </member>
        <member name="M:SharpCifs.Smb.SigningDigest.Verify(System.Byte[],System.Int32,SharpCifs.Smb.ServerMessageBlock)">
            <summary>Performs MAC signature verification.</summary>
            <remarks>
            Performs MAC signature verification.  This calculates the signature
            of the SMB and compares it to the signature field on the SMB itself.
            </remarks>
            <param name="data">The data.</param>
            <param name="offset">The starting offset at which the SMB header begins.</param>
            <param name="length">The length of the SMB data starting at offset.</param>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.SmbAuthException" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbComSessionSetupAndX.#ctor(SharpCifs.Smb.SmbSession,SharpCifs.Smb.ServerMessageBlock,System.Object)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.SmbException" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.SmbFile" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFile.Initialize">
            <summary>
            Apply the value written in Config, and dispose unused TCP connection cache.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.FileNoShare">
            <summary>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients (including other threads making calls into jCIFS)
            will not be permitted to access the target file and will receive "The
            file is being accessed by another process" message.
            </summary>
            <remarks>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients (including other threads making calls into jCIFS)
            will not be permitted to access the target file and will receive "The
            file is being accessed by another process" message.
            </remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.FileShareRead">
            <summary>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to read from the target file while
            this file is open.
            </summary>
            <remarks>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to read from the target file while
            this file is open. This constant may be logically OR'd with other share
            access flags.
            </remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.FileShareWrite">
            <summary>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to write to the target file while
            this file is open.
            </summary>
            <remarks>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to write to the target file while
            this file is open. This constant may be logically OR'd with other share
            access flags.
            </remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.FileShareDelete">
            <summary>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to delete the target file while
            this file is open.
            </summary>
            <remarks>
            When specified as the <tt>shareAccess</tt> constructor parameter,
            other SMB clients will be permitted to delete the target file while
            this file is open. This constant may be logically OR'd with other share
            access flags.
            </remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrReadonly">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> or set
            with <tt>setAttributes()</tt> will be read-only
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrHidden">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> or set
            with <tt>setAttributes()</tt> will be hidden
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrSystem">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> or set
            with <tt>setAttributes()</tt> will be a system file
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrVolume">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> is
            a volume
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrDirectory">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> is
            a directory
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.AttrArchive">
            <summary>
            A file with this bit on as returned by <tt>getAttributes()</tt> or set
            with <tt>setAttributes()</tt> is an archived file
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeFilesystem">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a regular file or directory.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeWorkgroup">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a workgroup.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeServer">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a server.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeShare">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a share.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeNamedPipe">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a named pipe.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypePrinter">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a printer.
            </summary>
        </member>
        <member name="F:SharpCifs.Smb.SmbFile.TypeComm">
            <summary>
            Returned by
            <see cref="M:SharpCifs.Smb.SmbFile.GetType">GetType()</see>
            if the resource this <tt>SmbFile</tt>
            represents is a communications device.
            </summary>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such as
            a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such as
            a file or directory. See the description and examples of smb URLs above.
            </remarks>
            <param name="url">A URL string</param>
            <exception cref="T:System.UriFormatException">
            If the <code>parent</code> and <code>child</code> parameters
            do not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(SharpCifs.Smb.SmbFile,System.String)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory. The second parameter is a relative path from
            the <code>parent SmbFile</code>. See the description above for examples
            of using the second <code>name</code> parameter.
            </remarks>
            <param name="context">A base <code>SmbFile</code></param>
            <param name="name">A path string relative to the <code>parent</code> paremeter</param>
            <exception cref="T:System.UriFormatException">
            If the <code>parent</code> and <code>child</code> parameters
            do not follow the prescribed syntax
            </exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">If the server or workgroup of the <tt>context</tt> file cannot be determined
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String,System.String)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory. The second parameter is a relative path from
            the <code>parent</code>. See the description above for examples of
            using the second <code>chile</code> parameter.
            </remarks>
            <param name="context">A URL string</param>
            <param name="name">A path string relative to the <code>context</code> paremeter</param>
            <exception cref="T:System.UriFormatException">
            If the <code>context</code> and <code>name</code> parameters
            do not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </remarks>
            <param name="url">A URL string</param>
            <param name="auth">The credentials the client should use for authentication</param>
            <exception cref="T:System.UriFormatException">If the <code>url</code> parameter does not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String,SharpCifs.Smb.NtlmPasswordAuthentication,System.Int32)">
            <summary>Constructs an SmbFile representing a file on an SMB network.</summary>
            <remarks>
            Constructs an SmbFile representing a file on an SMB network. The
            <tt>shareAccess</tt> parameter controls what permissions other
            clients have when trying to access the same file while this instance
            is still open. This value is either <tt>FILE_NO_SHARE</tt> or any
            combination of <tt>FILE_SHARE_READ</tt>, <tt>FILE_SHARE_WRITE</tt>,
            and <tt>FILE_SHARE_DELETE</tt> logically OR'd together.
            </remarks>
            <param name="url">A URL string</param>
            <param name="auth">The credentials the client should use for authentication</param>
            <param name="shareAccess">Specifies what access other clients have while this file is open.
            </param>
            <exception cref="T:System.UriFormatException">If the <code>url</code> parameter does not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String,System.String,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory. The second parameter is a relative path from
            the <code>context</code>. See the description above for examples of
            using the second <code>name</code> parameter.
            </remarks>
            <param name="context">A URL string</param>
            <param name="name">A path string relative to the <code>context</code> paremeter</param>
            <param name="auth">The credentials the client should use for authentication</param>
            <exception cref="T:System.UriFormatException">
            If the <code>context</code> and <code>name</code> parameters
            do not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.String,System.String,SharpCifs.Smb.NtlmPasswordAuthentication,System.Int32)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory. The second parameter is a relative path from
            the <code>context</code>. See the description above for examples of
            using the second <code>name</code> parameter. The <tt>shareAccess</tt>
            parameter controls what permissions other clients have when trying
            to access the same file while this instance is still open. This
            value is either <tt>FILE_NO_SHARE</tt> or any combination
            of <tt>FILE_SHARE_READ</tt>, <tt>FILE_SHARE_WRITE</tt>, and
            <tt>FILE_SHARE_DELETE</tt> logically OR'd together.
            </remarks>
            <param name="context">A URL string</param>
            <param name="name">A path string relative to the <code>context</code> paremeter</param>
            <param name="auth">The credentials the client should use for authentication</param>
            <param name="shareAccess">Specifies what access other clients have while this file is open.
            </param>
            <exception cref="T:System.UriFormatException">
            If the <code>context</code> and <code>name</code> parameters
            do not follow the prescribed syntax
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(SharpCifs.Smb.SmbFile,System.String,System.Int32)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory. The second parameter is a relative path from
            the <code>context</code>. See the description above for examples of
            using the second <code>name</code> parameter. The <tt>shareAccess</tt>
            parameter controls what permissions other clients have when trying
            to access the same file while this instance is still open. This
            value is either <tt>FILE_NO_SHARE</tt> or any combination
            of <tt>FILE_SHARE_READ</tt>, <tt>FILE_SHARE_WRITE</tt>, and
            <tt>FILE_SHARE_DELETE</tt> logically OR'd together.
            </remarks>
            <param name="context">A base <code>SmbFile</code></param>
            <param name="name">A path string relative to the <code>context</code> file path</param>
            <param name="shareAccess">Specifies what access other clients have while this file is open.
            </param>
            <exception cref="T:System.UriFormatException">
            If the <code>context</code> and <code>name</code> parameters
            do not follow the prescribed syntax
            </exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.Uri)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory from a <tt>URL</tt> object.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory from a <tt>URL</tt> object.
            </remarks>
            <param name="url">The URL of the target resource</param>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(System.Uri,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <summary>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory from a <tt>URL</tt> object and an
            <tt>NtlmPasswordAuthentication</tt> object.
            </summary>
            <remarks>
            Constructs an SmbFile representing a resource on an SMB network such
            as a file or directory from a <tt>URL</tt> object and an
            <tt>NtlmPasswordAuthentication</tt> object.
            </remarks>
            <param name="url">The URL of the target resource</param>
            <param name="auth">The credentials the client should use for authentication</param>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.#ctor(SharpCifs.Smb.SmbFile,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.ResolveDfs(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Send(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetAddress">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetFirstAddress">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Connect0">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoConnect">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Connect">
            <summary>It is not necessary to call this method directly.</summary>
            <remarks>
            It is not necessary to call this method directly. This is the
            <tt>URLConnection</tt> implementation of <tt>connect()</tt>.
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Open0(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Open(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Close(System.Int32,System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Close(System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Close">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetPrincipal">
            <summary>
            Returns the <tt>NtlmPasswordAuthentication</tt> object used as
            credentials with this file or pipe.
            </summary>
            <remarks>
            Returns the <tt>NtlmPasswordAuthentication</tt> object used as
            credentials with this file or pipe. This can be used to retrieve the
            username for example:
            <tt>
            String username = f.getPrincipal().getName();
            </tt>
            The <tt>Principal</tt> object returned will never be <tt>null</tt>
            however the username can be <tt>null</tt> indication anonymous
            credentials were used (e.g. some IPC$ services).
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetName">
            <summary>Returns the last component of the target URL.</summary>
            <remarks>
            Returns the last component of the target URL. This will
            effectively be the name of the file or directory represented by this
            <code>SmbFile</code> or in the case of URLs that only specify a server
            or workgroup, the server or workgroup will be returned. The name of
            the root URL <code>smb://</code> is also <code>smb://</code>. If this
            <tt>SmbFile</tt> refers to a workgroup, server, share, or directory,
            the name will include a trailing slash '/' so that composing new
            <tt>SmbFile</tt>s will maintain the trailing slash requirement.
            </remarks>
            <returns>
            The last component of the URL associated with this SMB
            resource or <code>smb://</code> if the resource is <code>smb://</code>
            itself.
            </returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetParent">
            <summary>
            Everything but the last component of the URL representing this SMB
            resource is effectivly it's parent.
            </summary>
            <remarks>
            Everything but the last component of the URL representing this SMB
            resource is effectivly it's parent. The root URL <code>smb://</code>
            does not have a parent. In this case <code>smb://</code> is returned.
            </remarks>
            <returns>
            The parent directory of this SMB resource or
            <code>smb://</code> if the resource refers to the root of the URL
            hierarchy which incedentally is also <code>smb://</code>.
            </returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetPath">
            <summary>Returns the full uncanonicalized URL of this SMB resource.</summary>
            <remarks>
            Returns the full uncanonicalized URL of this SMB resource. An
            <code>SmbFile</code> constructed with the result of this method will
            result in an <code>SmbFile</code> that is equal to the original.
            </remarks>
            <returns>The uncanonicalized full URL of this SMB resource.</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetUncPath">
            <summary>Retuns the Windows UNC style path with backslashs intead of forward slashes.
            </summary>
            <remarks>Retuns the Windows UNC style path with backslashs intead of forward slashes.
            </remarks>
            <returns>The UNC path.</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetCanonicalPath">
            <summary>
            Returns the full URL of this SMB resource with '.' and '..' components
            factored out.
            </summary>
            <remarks>
            Returns the full URL of this SMB resource with '.' and '..' components
            factored out. An <code>SmbFile</code> constructed with the result of
            this method will result in an <code>SmbFile</code> that is equal to
            the original.
            </remarks>
            <returns>The canonicalized URL of this SMB resource.</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetShare">
            <summary>Retrieves the share associated with this SMB resource.</summary>
            <remarks>
            Retrieves the share associated with this SMB resource. In
            the case of <code>smb://</code>, <code>smb://workgroup/</code>,
            and <code>smb://server/</code> URLs which do not specify a share,
            <code>null</code> will be returned.
            </remarks>
            <returns>The share component or <code>null</code> if there is no share</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetServer">
            <summary>Retrieve the hostname of the server for this SMB resource.</summary>
            <remarks>
            Retrieve the hostname of the server for this SMB resource. If this
            <code>SmbFile</code> references a workgroup, the name of the workgroup
            is returned. If this <code>SmbFile</code> refers to the root of this
            SMB network hierarchy, <code>null</code> is returned.
            </remarks>
            <returns>
            The server or workgroup name or <code>null</code> if this
            <code>SmbFile</code> refers to the root <code>smb://</code> resource.
            </returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetType">
            <summary>Returns type of of object this <tt>SmbFile</tt> represents.</summary>
            <remarks>Returns type of of object this <tt>SmbFile</tt> represents.</remarks>
            <returns>
            <tt>TYPE_FILESYSTEM, TYPE_WORKGROUP, TYPE_SERVER, TYPE_SHARE,
            TYPE_PRINTER, TYPE_NAMED_PIPE</tt>, or <tt>TYPE_COMM</tt>.
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.IsWorkgroup0">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.QueryPath(System.String,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Exists">
            <summary>Tests to see if the SMB resource exists.</summary>
            <remarks>
            Tests to see if the SMB resource exists. If the resource refers
            only to a server, this method determines if the server exists on the
            network and is advertising SMB services. If this resource refers to
            a workgroup, this method determines if the workgroup name is valid on
            the local SMB network. If this <code>SmbFile</code> refers to the root
            <code>smb://</code> resource <code>true</code> is always returned. If
            this <code>SmbFile</code> is a traditional file or directory, it will
            be queried for on the specified server as expected.
            </remarks>
            <returns>
            <code>true</code> if the resource exists or is alive or
            <code>false</code> otherwise
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CanRead">
            <summary>
            Tests to see if the file this <code>SmbFile</code> represents can be
            read.
            </summary>
            <remarks>
            Tests to see if the file this <code>SmbFile</code> represents can be
            read. Because any file, directory, or other resource can be read if it
            exists, this method simply calls the <code>exists</code> method.
            </remarks>
            <returns><code>true</code> if the file is read-only</returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CanWrite">
            <summary>
            Tests to see if the file this <code>SmbFile</code> represents
            exists and is not marked read-only.
            </summary>
            <remarks>
            Tests to see if the file this <code>SmbFile</code> represents
            exists and is not marked read-only. By default, resources are
            considered to be read-only and therefore for <code>smb://</code>,
            <code>smb://workgroup/</code>, and <code>smb://server/</code> resources
            will be read-only.
            </remarks>
            <returns>
            <code>true</code> if the resource exists is not marked
            read-only
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.IsDirectory">
            <summary>Tests to see if the file this <code>SmbFile</code> represents is a directory.
            </summary>
            <remarks>Tests to see if the file this <code>SmbFile</code> represents is a directory.
            </remarks>
            <returns><code>true</code> if this <code>SmbFile</code> is a directory</returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.IsFile">
            <summary>Tests to see if the file this <code>SmbFile</code> represents is not a directory.
            </summary>
            <remarks>Tests to see if the file this <code>SmbFile</code> represents is not a directory.
            </remarks>
            <returns><code>true</code> if this <code>SmbFile</code> is not a directory</returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.IsHidden">
            <summary>
            Tests to see if the file this SmbFile represents is marked as
            hidden.
            </summary>
            <remarks>
            Tests to see if the file this SmbFile represents is marked as
            hidden. This method will also return true for shares with names that
            end with '$' such as <code>IPC$</code> or <code>C$</code>.
            </remarks>
            <returns><code>true</code> if the <code>SmbFile</code> is marked as being hidden</returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetDfsPath">
            <summary>
            If the path of this <code>SmbFile</code> falls within a DFS volume,
            this method will return the referral path to which it maps.
            </summary>
            <remarks>
            If the path of this <code>SmbFile</code> falls within a DFS volume,
            this method will return the referral path to which it maps. Otherwise
            <code>null</code> is returned.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CreateTime">
            <summary>Retrieve the time this <code>SmbFile</code> was created.</summary>
            <remarks>
            Retrieve the time this <code>SmbFile</code> was created. The value
            returned is suitable for constructing a
            <see cref="T:System.DateTime">System.DateTime</see>
            object
            (i.e. seconds since Epoch 1970). Times should be the same as those
            reported using the properties dialog of the Windows Explorer program.
            For Win95/98/Me this is actually the last write time. It is currently
            not possible to retrieve the create time from files on these systems.
            </remarks>
            <returns>
            The number of milliseconds since the 00:00:00 GMT, January 1,
            1970 as a <code>long</code> value
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.LastModified">
            <summary>
            Retrieve the last time the file represented by this
            <code>SmbFile</code> was modified.
            </summary>
            <remarks>
            Retrieve the last time the file represented by this
            <code>SmbFile</code> was modified. The value returned is suitable for
            constructing a
            <see cref="T:System.DateTime">System.DateTime</see>
            object (i.e. seconds since Epoch
            1970). Times should be the same as those reported using the properties
            dialog of the Windows Explorer program.
            </remarks>
            <returns>
            The number of milliseconds since the 00:00:00 GMT, January 1,
            1970 as a <code>long</code> value
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.List" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFile.List(SharpCifs.Smb.ISmbFilenameFilter)">
            <summary>List the contents of this SMB resource.</summary>
            <remarks>
            List the contents of this SMB resource. The list returned will be
            identical to the list returned by the parameterless <code>list()</code>
            method minus filenames filtered by the specified filter.
            </remarks>
            <param name="filter">a filename filter to exclude filenames from the results</param>
            <exception cref="T:SharpCifs.Smb.SmbException"># @return An array of filenames</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.ListFiles" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.ListFiles(System.String)" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFile.ListFiles(SharpCifs.Smb.ISmbFilenameFilter)">
            <summary>List the contents of this SMB resource.</summary>
            <remarks>
            List the contents of this SMB resource. The list returned will be
            identical to the list returned by the parameterless <code>listFiles()</code>
            method minus files filtered by the specified filename filter.
            </remarks>
            <param name="filter">a filter to exclude files from the results</param>
            <returns>An array of <tt>SmbFile</tt> objects</returns>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.ListFiles(SharpCifs.Smb.ISmbFileFilter)">
            <summary>List the contents of this SMB resource.</summary>
            <remarks>
            List the contents of this SMB resource. The list returned will be
            identical to the list returned by the parameterless <code>listFiles()</code>
            method minus filenames filtered by the specified filter.
            </remarks>
            <param name="filter">a file filter to exclude files from the results</param>
            <returns>An array of <tt>SmbFile</tt> objects</returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.List(System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.ListFiles(System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoEnum(System.Collections.Generic.List{System.Object},System.Boolean,System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoShareEnum(System.Collections.Generic.List{System.Object},System.Boolean,System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoDfsRootEnum">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoMsrpcShareEnum">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoNetShareEnum">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoNetServerEnum(System.Collections.Generic.List{System.Object},System.Boolean,System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.DoFindFirstNext(System.Collections.Generic.List{System.Object},System.Boolean,System.String,System.Int32,SharpCifs.Smb.ISmbFilenameFilter,SharpCifs.Smb.ISmbFileFilter)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.RenameTo(SharpCifs.Smb.SmbFile)">
            <summary>
            Changes the name of the file this <code>SmbFile</code> represents to the name
            designated by the <code>SmbFile</code> argument.
            </summary>
            <remarks>
            Changes the name of the file this <code>SmbFile</code> represents to the name
            designated by the <code>SmbFile</code> argument.
            <p/>
            <i>Remember: <code>SmbFile</code>s are immutible and therefore
            the path associated with this <code>SmbFile</code> object will not
            change). To access the renamed file it is necessary to construct a
            new <tt>SmbFile</tt></i>.
            </remarks>
            <param name="dest">An <code>SmbFile</code> that represents the new pathname</param>
            <exception cref="T:System.ArgumentNullException">If the <code>dest</code> argument is <code>null</code>
            </exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.WriterThread.#ctor(SharpCifs.Smb.SmbFile)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CopyTo0(SharpCifs.Smb.SmbFile,System.Byte[][],System.Int32,SharpCifs.Smb.SmbFile.WriterThread,SharpCifs.Smb.SmbComReadAndX,SharpCifs.Smb.SmbComReadAndXResponse)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CopyTo(SharpCifs.Smb.SmbFile)">
            <summary>
            This method will copy the file or directory represented by this
            <tt>SmbFile</tt> and it's sub-contents to the location specified by the
            <tt>dest</tt> parameter.
            </summary>
            <remarks>
            This method will copy the file or directory represented by this
            <tt>SmbFile</tt> and it's sub-contents to the location specified by the
            <tt>dest</tt> parameter. This file and the destination file do not
            need to be on the same host. This operation does not copy extended
            file attibutes such as ACLs but it does copy regular attributes as
            well as create and last write times. This method is almost twice as
            efficient as manually copying as it employs an additional write
            thread to read and write data concurrently.
            <p/>
            It is not possible (nor meaningful) to copy entire workgroups or
            servers.
            </remarks>
            <param name="dest">the destination file or directory</param>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Delete">
            <summary>
            This method will delete the file or directory specified by this
            <code>SmbFile</code>.
            </summary>
            <remarks>
            This method will delete the file or directory specified by this
            <code>SmbFile</code>. If the target is a directory, the contents of
            the directory will be deleted as well. If a file within the directory or
            it's sub-directories is marked read-only, the read-only status will
            be removed and the file will be deleted.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Delete(System.String)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Length">
            <summary>Returns the length of this <tt>SmbFile</tt> in bytes.</summary>
            <remarks>
            Returns the length of this <tt>SmbFile</tt> in bytes. If this object
            is a <tt>TYPE_SHARE</tt> the total capacity of the disk shared in
            bytes is returned. If this object is a directory or a type other than
            <tt>TYPE_SHARE</tt>, 0L is returned.
            </remarks>
            <returns>
            The length of the file in bytes or 0 if this
            <code>SmbFile</code> is not a file.
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetDiskFreeSpace">
            <summary>
            This method returns the free disk space in bytes of the drive this share
            represents or the drive on which the directory or file resides.
            </summary>
            <remarks>
            This method returns the free disk space in bytes of the drive this share
            represents or the drive on which the directory or file resides. Objects
            other than <tt>TYPE_SHARE</tt> or <tt>TYPE_FILESYSTEM</tt> will result
            in 0L being returned.
            </remarks>
            <returns>
            the free disk space in bytes of the drive on which this file or
            directory resides
            </returns>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.QueryFsInformation(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Mkdir">
            <summary>
            Creates a directory with the path specified by this
            <code>SmbFile</code>.
            </summary>
            <remarks>
            Creates a directory with the path specified by this
            <code>SmbFile</code>. For this method to be successful, the target
            must not already exist. This method will fail when
            used with <code>smb://</code>, <code>smb://workgroup/</code>,
            <code>smb://server/</code>, or <code>smb://server/share/</code> URLs
            because workgroups, servers, and shares cannot be dynamically created
            (although in the future it may be possible to create shares).
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.Mkdirs">
            <summary>
            Creates a directory with the path specified by this <tt>SmbFile</tt>
            and any parent directories that do not exist.
            </summary>
            <remarks>
            Creates a directory with the path specified by this <tt>SmbFile</tt>
            and any parent directories that do not exist. This method will fail
            when used with <code>smb://</code>, <code>smb://workgroup/</code>,
            <code>smb://server/</code>, or <code>smb://server/share/</code> URLs
            because workgroups, servers, and shares cannot be dynamically created
            (although in the future it may be possible to create shares).
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.CreateNewFile">
            <summary>Create a new file but fail if it already exists.</summary>
            <remarks>
            Create a new file but fail if it already exists. The check for
            existance of the file and it's creation are an atomic operation with
            respect to other filesystem activities.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.SetPathInformation(System.Int32,System.Int64,System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.SetCreateTime(System.Int64)">
            <summary>Set the create time of the file.</summary>
            <remarks>
            Set the create time of the file. The time is specified as milliseconds
            from Jan 1, 1970 which is the same as that which is returned by the
            <tt>createTime()</tt> method.
            <p/>
            This method does not apply to workgroups, servers, or shares.
            </remarks>
            <param name="time">the create time as milliseconds since Jan 1, 1970</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.SetLastModified(System.Int64)">
            <summary>Set the last modified time of the file.</summary>
            <remarks>
            Set the last modified time of the file. The time is specified as milliseconds
            from Jan 1, 1970 which is the same as that which is returned by the
            <tt>lastModified()</tt>, <tt>getLastModified()</tt>, and <tt>getDate()</tt> methods.
            <p/>
            This method does not apply to workgroups, servers, or shares.
            </remarks>
            <param name="time">the last modified time as milliseconds since Jan 1, 1970</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetAttributes">
            <summary>Return the attributes of this file.</summary>
            <remarks>
            Return the attributes of this file. Attributes are represented as a
            bitset that must be masked with <tt>ATTR_*</tt> constants to determine
            if they are set or unset. The value returned is suitable for use with
            the <tt>setAttributes()</tt> method.
            </remarks>
            <returns>the <tt>ATTR_*</tt> attributes associated with this file</returns>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.SetAttributes(System.Int32)">
            <summary>Set the attributes of this file.</summary>
            <remarks>
            Set the attributes of this file. Attributes are composed into a
            bitset by bitwise ORing the <tt>ATTR_*</tt> constants. Setting the
            value returned by <tt>getAttributes</tt> will result in both files
            having the same attributes.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.SetReadOnly">
            <summary>Make this file read-only.</summary>
            <remarks>
            Make this file read-only. This is shorthand for <tt>setAttributes(
            getAttributes() | ATTR_READ_ONLY )</tt>.
            </remarks>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.SetReadWrite" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFile.ToUrl">
            <summary>
            Returns a
            <see cref="T:System.Uri">System.Uri</see>
            for this <code>SmbFile</code>. The
            <code>URL</code> may be used as any other <code>URL</code> might to
            access an SMB resource. Currently only retrieving data and information
            is supported (i.e. no <tt>doOutput</tt>).
            </summary>
            <returns>
            A new <code>
            <see cref="T:System.Uri">System.Uri</see>
            </code> for this <code>SmbFile</code>
            </returns>
            <exception cref="T:System.UriFormatException">System.UriFormatException</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetHashCode">
            <summary>
            Computes a hashCode for this file based on the URL string and IP
            address if the server.
            </summary>
            <remarks>
            Computes a hashCode for this file based on the URL string and IP
            address if the server. The hashing function uses the hashcode of the
            server address, the canonical representation of the URL, and does not
            compare authentication information. In essance, two
            <code>SmbFile</code> objects that refer to
            the same file should generate the same hashcode provided it is possible
            to make such a determination.
            </remarks>
            <returns>A hashcode for this abstract file</returns>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.Equals(System.Object)" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFile.ToString">
            <summary>Returns the string representation of this SmbFile object.</summary>
            <remarks>
            Returns the string representation of this SmbFile object. This will
            be the same as the URL used to construct this <code>SmbFile</code>.
            This method will return the same value
            as <code>getPath</code>.
            </remarks>
            <returns>The original URL representation of this SMB resource</returns>
            <exception cref="T:SharpCifs.Smb.SmbException">SmbException</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetContentLength">
            <summary>This URLConnection method just returns the result of <tt>length()</tt>.</summary>
            <remarks>This URLConnection method just returns the result of <tt>length()</tt>.</remarks>
            <returns>the length of this file or 0 if it refers to a directory</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetDate">
            <summary>This URLConnection method just returns the result of <tt>lastModified</tt>.
            </summary>
            <remarks>This URLConnection method just returns the result of <tt>lastModified</tt>.
            </remarks>
            <returns>the last modified data as milliseconds since Jan 1, 1970</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetLastModified">
            <summary>This URLConnection method just returns the result of <tt>lastModified</tt>.
            </summary>
            <remarks>This URLConnection method just returns the result of <tt>lastModified</tt>.
            </remarks>
            <returns>the last modified data as milliseconds since Jan 1, 1970</returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetInputStream">
            <summary>This URLConnection method just returns a new <tt>SmbFileInputStream</tt> created with this file.
            </summary>
            <remarks>This URLConnection method just returns a new <tt>SmbFileInputStream</tt> created with this file.
            </remarks>
            <exception cref="T:System.IO.IOException">thrown by <tt>SmbFileInputStream</tt> constructor
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetOutputStream">
            <summary>This URLConnection method just returns a new <tt>SmbFileOutputStream</tt> created with this file.
            </summary>
            <remarks>This URLConnection method just returns a new <tt>SmbFileOutputStream</tt> created with this file.
            </remarks>
            <exception cref="T:System.IO.IOException">thrown by <tt>SmbFileOutputStream</tt> constructor
            </exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.ProcessAces(SharpCifs.Smb.Ace[],System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFile.GetSecurity(System.Boolean)">
            <summary>
            Return an array of Access Control Entry (ACE) objects representing
            the security descriptor associated with this file or directory.
            </summary>
            <remarks>
            Return an array of Access Control Entry (ACE) objects representing
            the security descriptor associated with this file or directory.
            If no DACL is present, null is returned. If the DACL is empty, an array with 0 elements is returned.
            </remarks>
            <param name="resolveSids">
            Attempt to resolve the SIDs within each ACE form
            their numeric representation to their corresponding account names.
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.GetShareSecurity(System.Boolean)" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFile.GetSecurity" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFileExtensions.GetLocalCreateTime(SharpCifs.Smb.SmbFile)">
            <summary>
            Get file's creation date converted to local timezone
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.GetLocalLastModified(SharpCifs.Smb.SmbFile)">
            <summary>
            Get file's last modified date converted to local timezone
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.ListFilesAsync(SharpCifs.Smb.SmbFile)">
            <summary>
            List files async
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.ListFilesAsync(SharpCifs.Smb.SmbFile,System.String)">
            <summary>
            List files async
            </summary>
            <param name="smbFile"></param>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.ListAsync(SharpCifs.Smb.SmbFile)">
            <summary>
            List files async
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.MkDirAsync(SharpCifs.Smb.SmbFile)">
            <summary>
            MkDir async method
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.DeleteAsync(SharpCifs.Smb.SmbFile)">
            <summary>
            Delete file async
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.RenameToAsync(SharpCifs.Smb.SmbFile,SharpCifs.Smb.SmbFile)">
            <summary>
            Rename file async
            </summary>
            <param name="smbFile"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.GetInputStreamAsync(SharpCifs.Smb.SmbFile)">
            <summary>
            Get input stream async
            </summary>
            <param name="smbFile"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileExtensions.GetOutputStreamAsync(SharpCifs.Smb.SmbFile,System.Boolean)">
            <summary>
            Get output stream async
            </summary>
            <param name="smbFile"></param>
            <param name="append"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Smb.ISmbFileFilter.Accept(SharpCifs.Smb.SmbFile)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="T:SharpCifs.Smb.SmbFileInputStream">
            <summary>This InputStream can read bytes from a file on an SMB file server.</summary>
            <remarks>This InputStream can read bytes from a file on an SMB file server. Offsets are 64 bits.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.#ctor(System.String)">
            <summary>
            Creates an
            <see cref="!:System.IO.InputStream">System.IO.InputStream</see>
            for reading bytes from a file on
            an SMB server addressed by the <code>url</code> parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of the smb
            URL syntax.
            </summary>
            <param name="url">An smb URL string representing the file to read from</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.#ctor(SharpCifs.Smb.SmbFile)">
            <summary>
            Creates an
            <see cref="!:System.IO.InputStream">System.IO.InputStream</see>
            for reading bytes from a file on
            an SMB server represented by the
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of
            the smb URL syntax.
            </summary>
            <param name="file">An <code>SmbFile</code> specifying the file to read from</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.#ctor(SharpCifs.Smb.SmbFile,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Close">
            <summary>Closes this input stream and releases any system resources associated with the stream.
            </summary>
            <remarks>Closes this input stream and releases any system resources associated with the stream.
            </remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Read">
            <summary>Reads a byte of data from this input stream.</summary>
            <remarks>Reads a byte of data from this input stream.</remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Read(System.Byte[])">
            <summary>Reads up to b.length bytes of data from this input stream into an array of bytes.
            </summary>
            <remarks>Reads up to b.length bytes of data from this input stream into an array of bytes.
            </remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads up to len bytes of data from this input stream into an array of bytes.
            </summary>
            <remarks>Reads up to len bytes of data from this input stream into an array of bytes.
            </remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.ReadDirect(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Available">
            <summary>This stream class is unbuffered.</summary>
            <remarks>
            This stream class is unbuffered. Therefore this method will always
            return 0 for streams connected to regular files. However, a
            stream created from a Named Pipe this method will query the server using a
            "peek named pipe" operation and return the number of available bytes
            on the server.
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.Skip(System.Int64)">
            <summary>Skip n bytes of data on this stream.</summary>
            <remarks>
            Skip n bytes of data on this stream. This operation will not result
            in any IO with the server. Unlink <tt>InputStream</tt> value less than
            the one provided will not be returned if it exceeds the end of the file
            (if this is a problem let us know).
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="P:SharpCifs.Smb.SmbFileInputStream.Position">
            <summary>
            Position in Stream
            </summary>
            <remarks>
            Add by dobes
            mod interface to WrappedSystemStream readable, for random access.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileInputStream.CanSeek">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Add by dobes
            mod interface to WrappedSystemStream readable, for random access.
            </remarks>
        </member>
        <member name="P:SharpCifs.Smb.SmbFileInputStream.Length">
            <summary>
            Get file length
            </summary>
        </member>
        <member name="M:SharpCifs.Smb.ISmbFilenameFilter.Accept(SharpCifs.Smb.SmbFile,System.String)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="T:SharpCifs.Smb.SmbFileOutputStream">
            <summary>This <code>OutputStream</code> can write bytes to a file on an SMB file server.
            </summary>
            <remarks>This <code>OutputStream</code> can write bytes to a file on an SMB file server.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.#ctor(System.String)">
            <summary>
            Creates an
            <see cref="!:System.IO.OutputStream">System.IO.OutputStream</see>
            for writing to a file
            on an SMB server addressed by the URL parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of
            the smb URL syntax.
            </summary>
            <param name="url">An smb URL string representing the file to write to</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.#ctor(SharpCifs.Smb.SmbFile)">
            <summary>
            Creates an
            <see cref="!:System.IO.OutputStream">System.IO.OutputStream</see>
            for writing bytes to a file on
            an SMB server represented by the
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of
            the smb URL syntax.
            </summary>
            <param name="file">An <code>SmbFile</code> specifying the file to write to</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an
            <see cref="!:System.IO.OutputStream">System.IO.OutputStream</see>
            for writing bytes to a file on an
            SMB server addressed by the URL parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of the smb URL syntax. If the
            second argument is <code>true</code>, then bytes will be written to the
            end of the file rather than the beginning.
            </summary>
            <param name="url">An smb URL string representing the file to write to</param>
            <param name="append">Append to the end of file</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.#ctor(SharpCifs.Smb.SmbFile,System.Boolean)">
            <summary>
            Creates an
            <see cref="!:System.IO.OutputStream">System.IO.OutputStream</see>
            for writing bytes to a file
            on an SMB server addressed by the <code>SmbFile</code> parameter. See
            <see cref="T:SharpCifs.Smb.SmbFile">SmbFile</see>
            for a detailed description and examples of
            the smb URL syntax. If the second argument is <code>true</code>, then
            bytes will be written to the end of the file rather than the beginning.
            </summary>
            <param name="file">An <code>SmbFile</code> representing the file to write to</param>
            <param name="append">Append to the end of file</param>
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbFileOutputStream.#ctor(System.String,System.Int32)" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.#ctor(SharpCifs.Smb.SmbFile,System.Boolean,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.Close">
            <summary>
            Closes this output stream and releases any system resources associated
            with it.
            </summary>
            <remarks>
            Closes this output stream and releases any system resources associated
            with it.
            </remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.Write(System.Int32)">
            <summary>Writes the specified byte to this file output stream.</summary>
            <remarks>Writes the specified byte to this file output stream.</remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.Write(System.Byte[])">
            <summary>
            Writes b.length bytes from the specified byte array to this
            file output stream.
            </summary>
            <remarks>
            Writes b.length bytes from the specified byte array to this
            file output stream.
            </remarks>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.EnsureOpen">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes len bytes from the specified byte array starting at
            offset off to this file output stream.
            </summary>
            <remarks>
            Writes len bytes from the specified byte array starting at
            offset off to this file output stream.
            </remarks>
            <param name="b">The array</param>
            <exception cref="T:System.IO.IOException">if a network error occurs</exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbFileOutputStream.WriteDirect(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Just bypasses TransWaitNamedPipe - used by DCERPC bind.</summary>
            <remarks>Just bypasses TransWaitNamedPipe - used by DCERPC bind.</remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Smb.SmbNamedPipe" で無視されました -->
        <member name="F:SharpCifs.Smb.SmbNamedPipe.PipeTypeRdonly">
            <summary>The pipe should be opened read-only.</summary>
            <remarks>The pipe should be opened read-only.</remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbNamedPipe.PipeTypeWronly">
            <summary>The pipe should be opened only for writing.</summary>
            <remarks>The pipe should be opened only for writing.</remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbNamedPipe.PipeTypeRdwr">
            <summary>The pipe should be opened for both reading and writing.</summary>
            <remarks>The pipe should be opened for both reading and writing.</remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbNamedPipe.PipeTypeCall">
            <summary>Pipe operations should behave like the <code>CallNamedPipe</code> Win32 Named Pipe function.
            </summary>
            <remarks>Pipe operations should behave like the <code>CallNamedPipe</code> Win32 Named Pipe function.
            </remarks>
        </member>
        <member name="F:SharpCifs.Smb.SmbNamedPipe.PipeTypeTransact">
            <summary>Pipe operations should behave like the <code>TransactNamedPipe</code> Win32 Named Pipe function.
            </summary>
            <remarks>Pipe operations should behave like the <code>TransactNamedPipe</code> Win32 Named Pipe function.
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbNamedPipe.#ctor(System.String,System.Int32)">
            <summary>
            Open the Named Pipe resource specified by the url
            parameter.
            </summary>
            <remarks>
            Open the Named Pipe resource specified by the url
            parameter. The pipeType parameter should be at least one of
            the <code>PIPE_TYPE</code> flags combined with the bitwise OR
            operator <code>|</code>. See the examples listed above.
            </remarks>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbNamedPipe.#ctor(System.String,System.Int32,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbNamedPipe.#ctor(System.Uri,System.Int32,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbNamedPipe.GetNamedPipeInputStream">
            <summary>
            Return the <code>InputStream</code> used to read information
            from this pipe instance.
            </summary>
            <remarks>
            Return the <code>InputStream</code> used to read information
            from this pipe instance. Presumably data would first be written
            to the <code>OutputStream</code> associated with this Named
            Pipe instance although this is not a requirement (e.g. a
            read-only named pipe would write data to this stream on
            connection). Reading from this stream may block. Therefore it
            may be necessary that an addition thread be used to read and
            write to a Named Pipe.
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbNamedPipe.GetNamedPipeOutputStream">
            <summary>
            Return the <code>OutputStream</code> used to write
            information to this pipe instance.
            </summary>
            <remarks>
            Return the <code>OutputStream</code> used to write
            information to this pipe instance. The act of writing data
            to this stream will result in response data recieved in the
            <code>InputStream</code> associated with this Named Pipe
            instance (unless of course it does not elicite a response or the pipe is write-only).
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.#ctor(System.String,System.String,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.#ctor(SharpCifs.Smb.SmbFile,System.String)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Read">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Read(System.Byte[])">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadFully(System.Byte[])">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadFully(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.SkipBytes(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Write(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Write(System.Byte[])">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Write(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.GetFilePointer">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Seek(System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Length">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.SetLength(System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.Close">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadBoolean">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadByte">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadUnsignedByte">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadShort">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadUnsignedShort">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadChar">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadInt">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadLong">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadFloat">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadDouble">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadLine">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.ReadUtf">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteBoolean(System.Boolean)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteByte(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteShort(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteChar(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteInt(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteLong(System.Int64)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteFloat(System.Single)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteDouble(System.Double)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteBytes(System.String)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbRandomAccessFile.WriteUtf(System.String)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.Interrogate(SharpCifs.Netbios.NbtAddress)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.GetChallengeForDomain">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.GetChallenge(SharpCifs.UniAddress)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.GetChallenge(SharpCifs.UniAddress,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Smb.SmbSession.Logon(SharpCifs.UniAddress,SharpCifs.Smb.NtlmPasswordAuthentication)" で無視されました -->
        <member name="M:SharpCifs.Smb.SmbSession.Logon(SharpCifs.UniAddress,System.Int32,SharpCifs.Smb.NtlmPasswordAuthentication)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.ClearCachedConnections">
            <summary>
            Clear All Cached Transport-Connections
            </summary>
            <remarks>
            Alias of SmbTransport.ClearCachedConnections
            </remarks>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.Send(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbSession.SessionSetup(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.ClearCachedConnections(System.Boolean)">
            <summary>
            Clear All Cached Transport-Connections
            </summary>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.HasCapability(System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.Ssn139">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.Negotiate(System.Int32,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.Connect">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoConnect">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoDisconnect(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.MakeKey(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.PeekKey">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoSend(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoSend0(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoRecv(SharpCifs.Util.Transport.Response)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.DoSkip">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.CheckStatus(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.Send(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.GetDfsReferrals(SharpCifs.Smb.NtlmPasswordAuthentication,System.String,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTransport.__getDfsReferrals(SharpCifs.Smb.NtlmPasswordAuthentication,System.String,System.Int32)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTree.Send(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.SmbTree.TreeConnect(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.#ctor(SharpCifs.Smb.SmbNamedPipe)">
            <exception cref="T:SharpCifs.Smb.SmbException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.Read">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.Read(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.Available">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeInputStream.Dce_read(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeOutputStream.#ctor(SharpCifs.Smb.SmbNamedPipe)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeOutputStream.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeOutputStream.Write(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeOutputStream.Write(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Smb.TransactNamedPipeOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.UniAddress" で無視されました -->
        <member name="M:SharpCifs.UniAddress.LookupServerOrWorkgroup(System.String,System.Net.IPAddress)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.UniAddress.GetByName(System.String)">
            <summary>Determines the address of a host given it's host name.</summary>
            <remarks>
            Determines the address of a host given it's host name. The name can be a
            machine name like "jcifs.samba.org",  or an IP address like "192.168.1.15".
            </remarks>
            <param name="hostname">NetBIOS or DNS hostname to resolve</param>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException">if there is an error resolving the name
            </exception>
        </member>
        <member name="M:SharpCifs.UniAddress.GetByName(System.String,System.Boolean)">
            <summary>Lookup <tt>hostname</tt> and return it's <tt>UniAddress</tt>.</summary>
            <remarks>
            Lookup <tt>hostname</tt> and return it's <tt>UniAddress</tt>. If the
            <tt>possibleNTDomainOrWorkgroup</tt> parameter is <tt>true</tt> an
            addtional name query will be performed to locate a master browser.
            </remarks>
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.UniAddress.GetAllByName(System.String,System.Boolean)">
            <exception cref="T:SharpCifs.Util.Sharpen.UnknownHostException"></exception>
        </member>
        <member name="M:SharpCifs.UniAddress.#ctor(System.Object)">
            <summary>
            Create a <tt>UniAddress</tt> by wrapping an <tt>InetAddress</tt> or
            <tt>NbtAddress</tt>.
            </summary>
            <remarks>
            Create a <tt>UniAddress</tt> by wrapping an <tt>InetAddress</tt> or
            <tt>NbtAddress</tt>.
            </remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.GetHashCode">
            <summary>Return the IP address of this address as a 32 bit integer.</summary>
            <remarks>Return the IP address of this address as a 32 bit integer.</remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.Equals(System.Object)">
            <summary>Compare two addresses for equality.</summary>
            <remarks>
            Compare two addresses for equality. Two <tt>UniAddress</tt>s are equal
            if they are both <tt>UniAddress</tt>' and refer to the same IP address.
            </remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.FirstCalledName">
            <summary>Guess first called name to try for session establishment.</summary>
            <remarks>
            Guess first called name to try for session establishment. This
            method is used exclusively by the <tt>jcifs.smb</tt> package.
            </remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.NextCalledName">
            <summary>Guess next called name to try for session establishment.</summary>
            <remarks>
            Guess next called name to try for session establishment. This
            method is used exclusively by the <tt>jcifs.smb</tt> package.
            </remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.GetAddress">
            <summary>Return the underlying <tt>NbtAddress</tt> or <tt>InetAddress</tt>.</summary>
            <remarks>Return the underlying <tt>NbtAddress</tt> or <tt>InetAddress</tt>.</remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.GetHostName">
            <summary>Return the hostname of this address such as "MYCOMPUTER".</summary>
            <remarks>Return the hostname of this address such as "MYCOMPUTER".</remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.GetHostAddress">
            <summary>Return the IP address as text such as "192.168.1.15".</summary>
            <remarks>Return the IP address as text such as "192.168.1.15".</remarks>
        </member>
        <member name="M:SharpCifs.UniAddress.ToString">
            <summary>
            Return the a text representation of this address such as
            <tt>MYCOMPUTER/192.168.1.15</tt>.
            </summary>
            <remarks>
            Return the a text representation of this address such as
            <tt>MYCOMPUTER/192.168.1.15</tt>.
            </remarks>
        </member>
        <member name="M:SharpCifs.Util.Base64.Encode(System.Byte[])">
            <summary>Base-64 encodes the supplied block of data.</summary>
            <remarks>
            Base-64 encodes the supplied block of data.  Line wrapping is not
            applied on output.
            </remarks>
            <param name="bytes">The block of data that is to be Base-64 encoded.</param>
            <returns>A <code>String</code> containing the encoded data.</returns>
        </member>
        <member name="M:SharpCifs.Util.Base64.Decode(System.String)">
            <summary>Decodes the supplied Base-64 encoded string.</summary>
            <remarks>Decodes the supplied Base-64 encoded string.</remarks>
            <param name="string">The Base-64 encoded string that is to be decoded.</param>
            <returns>A <code>byte[]</code> containing the decoded data block.</returns>
        </member>
        <member name="P:SharpCifs.Util.DbsHelper.Log.IsActive">
            <summary>
            コンソールへのログ出力を行うか否か
            </summary>
        </member>
        <member name="M:SharpCifs.Util.DbsHelper.Log.Out(System.Exception)">
            <summary>
            例外のログ出力を行う。
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:SharpCifs.Util.DbsHelper.Log.GetHighlighted(System.String[])">
            <summary>
            Cast string-arrary to Highlighted message
            文字列配列を強調メッセージ形式文字列に変換する。
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:SharpCifs.Util.DbsHelper.Log.GetErrorString(System.Exception)">
            <summary>
            Get Formatted Exception-Info string-array
            例外情報を整形した文字列配列を返す。
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Util.DES" で無視されました -->
        <member name="M:SharpCifs.Util.DES.SetKey(System.Byte[])">
            Set the key.
        </member>
        <member name="M:SharpCifs.Util.DES.Encrypt(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt a block of eight bytes.
        </member>
        <member name="M:SharpCifs.Util.DES.Decrypt(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt a block of eight bytes.
        </member>
        <member name="M:SharpCifs.Util.DES.Encrypt(System.Byte[],System.Byte[])">
            Encrypt a block of bytes.
        </member>
        <member name="M:SharpCifs.Util.DES.Decrypt(System.Byte[],System.Byte[])">
            Decrypt a block of bytes.
        </member>
        <member name="M:SharpCifs.Util.DES.Encrypt(System.Byte[])">
            <summary>encrypts an array where the length must be a multiple of 8</summary>
        </member>
        <member name="M:SharpCifs.Util.DES.Decrypt(System.Byte[])">
            <summary>decrypts an array where the length must be a multiple of 8</summary>
        </member>
        <member name="M:SharpCifs.Util.DES.SquashBytesToInts(System.Byte[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            Squash bytes down to ints.
        </member>
        <member name="M:SharpCifs.Util.DES.SpreadIntsToBytes(System.Int32[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            Spread ints into bytes.
        </member>
        <member name="M:SharpCifs.Util.Encdec.Enc_utf8(System.String,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Encdec.Dec_utf8(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Encdec.Dec_ucs2le(System.Byte[],System.Int32,System.Int32,System.Char[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Util.Hexdump.ToHexdump(System.IO.TextWriter,System.Byte[],System.Int32,System.Int32)" で無視されました -->
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Util.Hexdump.ToHexString(System.Int32,System.Int32)" で無視されました -->
        <member name="M:SharpCifs.Util.Hexdump.ToHexChars(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            This is the same as
            <see cref="M:SharpCifs.Util.Hexdump.ToHexString(System.Int32,System.Int32)">ToHexString(int, int)</see>
            but provides a more practical form when trying to avoid
            <see cref="T:System.String">string</see>
            concatenation and
            <see cref="T:System.Text.StringBuilder">System.Text.StringBuilder</see>
            .
            </summary>
        </member>
        <member name="T:SharpCifs.Util.Hmact64">
            <summary>This is an implementation of the HMACT64 keyed hashing algorithm.</summary>
            <remarks>
            This is an implementation of the HMACT64 keyed hashing algorithm.
            HMACT64 is defined by Luke Leighton as a modified HMAC-MD5 (RFC 2104)
            in which the key is truncated at 64 bytes (rather than being hashed
            via MD5).
            </remarks>
        </member>
        <member name="M:SharpCifs.Util.Hmact64.#ctor(System.Byte[])">
            <summary>Creates an HMACT64 instance which uses the given secret key material.</summary>
            <remarks>Creates an HMACT64 instance which uses the given secret key material.</remarks>
            <param name="key">The key material to use in hashing.</param>
        </member>
        <member name="T:SharpCifs.Util.LogStream">
            <summary>
            0 - nothing
            1 - critical [default]
            2 - basic info can be logged under load
            3 - almost everything
            N - debugging
            </summary>
        </member>
        <member name="M:SharpCifs.Util.LogStream.SetInstance(System.IO.TextWriter)">
            <summary>
            This must be called before <tt>getInstance</tt> is called or
            it will have no effect.
            </summary>
            <remarks>
            This must be called before <tt>getInstance</tt> is called or
            it will have no effect.
            </remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "T:SharpCifs.Util.Md4" で無視されました -->
        <member name="F:SharpCifs.Util.Md4.BlockLength">
            <summary>The size in bytes of the input block to the tranformation algorithm.</summary>
            <remarks>The size in bytes of the input block to the tranformation algorithm.</remarks>
        </member>
        <member name="F:SharpCifs.Util.Md4._context">
            <summary>4 32-bit words (interim result)</summary>
        </member>
        <member name="F:SharpCifs.Util.Md4._count">
            <summary>Number of bytes processed so far mod.</summary>
            <remarks>Number of bytes processed so far mod. 2 power of 64.</remarks>
        </member>
        <member name="F:SharpCifs.Util.Md4._buffer">
            <summary>512 bits input buffer = 16 x 32-bit words holds until reaches 512 bits.</summary>
            <remarks>512 bits input buffer = 16 x 32-bit words holds until reaches 512 bits.</remarks>
        </member>
        <member name="F:SharpCifs.Util.Md4._x">
            <summary>512 bits work buffer = 16 x 32-bit words</summary>
        </member>
        <member name="M:SharpCifs.Util.Md4.#ctor(SharpCifs.Util.Md4)">
            <summary>This constructor is here to implement cloneability of this class.</summary>
            <remarks>This constructor is here to implement cloneability of this class.</remarks>
        </member>
        <member name="M:SharpCifs.Util.Md4.Clone">
            <summary>Returns a copy of this MD object.</summary>
            <remarks>Returns a copy of this MD object.</remarks>
        </member>
        <member name="M:SharpCifs.Util.Md4.EngineReset">
            <summary>
            Resets this object disregarding any temporary data present at the
            time of the invocation of this call.
            </summary>
            <remarks>
            Resets this object disregarding any temporary data present at the
            time of the invocation of this call.
            </remarks>
        </member>
        <member name="M:SharpCifs.Util.Md4.EngineUpdate(System.Byte)">
            <summary>Continues an MD4 message digest using the input byte.</summary>
            <remarks>Continues an MD4 message digest using the input byte.</remarks>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Util.Md4.EngineUpdate(System.Byte[],System.Int32,System.Int32)" で無視されました -->
        <member name="M:SharpCifs.Util.Md4.EngineDigest">
            <summary>
            Completes the hash computation by performing final operations such
            as padding.
            </summary>
            <remarks>
            Completes the hash computation by performing final operations such
            as padding. At the return of this engineDigest, the MD engine is
            reset.
            </remarks>
            <returns>the array of bytes for the resulting hash value.</returns>
        </member>
        <!-- 正しくない形式の XML コメントがメンバー "M:SharpCifs.Util.Md4.Transform(System.Byte[],System.Int32)" で無視されました -->
        <member name="T:SharpCifs.Util.Sharpen.SocketEx">
            <summary>
            Extended Socket
            </summary>
            <remarks>
            System.Net.Scokets.Socket
            https://docs.microsoft.com/ja-jp/dotnet/api/system.net.sockets.socket?view=netcore-1.1
            </remarks>
        </member>
        <member name="T:SharpCifs.Util.Transport.Transport">
            <summary>
            This class simplifies communication for protocols that support
            multiplexing requests.
            </summary>
            <remarks>
            This class simplifies communication for protocols that support
            multiplexing requests. It encapsulates a stream and some protocol
            knowledge (provided by a concrete subclass) so that connecting,
            disconnecting, sending, and receiving can be syncronized
            properly. Apparatus is provided to send and receive requests
            concurrently.
            </remarks>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.Readn(SharpCifs.Util.Sharpen.InputStream,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.MakeKey(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.PeekKey">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.DoSend(SharpCifs.Smb.ServerMessageBlock)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.DoRecv(SharpCifs.Util.Transport.Response)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.DoSkip">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.Sendrecv(SharpCifs.Smb.ServerMessageBlock,SharpCifs.Util.Transport.Response,System.Int64)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.DoConnect">
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.DoDisconnect(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.Connect(System.Int64)">
            <exception cref="T:SharpCifs.Util.Transport.TransportException"></exception>
        </member>
        <member name="M:SharpCifs.Util.Transport.Transport.Disconnect(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
    </members>
</doc>
